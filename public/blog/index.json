{
    "version": "https://jsonfeed.org/version/1",
    "title": "Andreas Petersell",
    "home_page_url": "https://www.petersell.com/",
    "feed_url": "https://www.petersell.com/blog/index.json",
    "description": "Recent content on Andreas Petersell", 
    "favicon": "https://www.petersell.com/assets/icon.png", 
    "icon": "https://www.petersell.com/assets/icon.png", 
    "author": {
        "name": "Andreas Petersell"
    },
    "items":[{"content_html":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAntora ist ein \u003cem\u003eStatic Site Generator\u003c/em\u003e für Technische Redakteure. Der Content wird in Asciidoc geschrieben und kann sich in verschiedenen Git-Repositorys befinden. Zum Testen sollen sich die Quelldateien jedoch lokal auf dem Rechner befinden.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"toc\" class=\"toc\"\u003e\n\u003cdiv id=\"toctitle\" class=\"title\"\u003e\u003c/div\u003e\n\u003cul class=\"sectlevel1\"\u003e\n\u003cli\u003e\u003ca href=\"#_quellen\"\u003eQuellen\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_kontext\"\u003eKontext\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_1_verzeichnisstruktur_einrichten\"\u003e1) Verzeichnisstruktur einrichten\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_2_playbook_datei_erstellen\"\u003e2) Playbook-Datei erstellen\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_3_antora_output_generieren\"\u003e3) Antora-Output generieren\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_quellen\"\u003eQuellen\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://gitlab.com/antora/antora/-/issues/284#note_95389433\" class=\"ext-link\" target=\"_blank\" rel=\"noopener\"\u003eIs there a way to use Antora without Git?\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_kontext\"\u003eKontext\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAntora ist in erster Linie dazu gedacht, Dokumentationen aus mehreren Repositorys unter einer Oberfläche zusammenzuführen (docs as code). Bevor ein Redakteur jedoch via Merge Request in eine übergreifende Gesamtdokumentation eincheckt, möchte er sichergehen und seine Texte testen. Antora sollte dazu auch lokal lauffähig sein.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_1_verzeichnisstruktur_einrichten\"\u003e1) Verzeichnisstruktur einrichten\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEs gibt drei Quell-Bestandteile einer Antora-Dokumentation:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"olist arabic\"\u003e\n\u003col class=\"arabic\"\u003e\n\u003cli\u003e\n\u003cp\u003eDie Playbook-Datei (z.B. \u003ccode\u003eantora-test-playbook.yml\u003c/code\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDie Components (Die Inhalte-Repositorys bzw. Inhalte-Verzeichnisse)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDas UI-Theme (\u003ccode\u003eui-bundle.zip\u003c/code\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDiese 3 Bestandteile werden lokal in ein Verzeichnis kopiert. Ich möchte es das \u003cem\u003eAntora-Arbeitsverzeichnis\u003c/em\u003e nennen. Im Beispiel existieren im \u003cem\u003eAntora-Arbeitsverzeichnis\u003c/em\u003e zwei Components sowie die Playbook-Datei und das UI-Theme.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003ecom.petersell.example\n    ├── com.petersell.example.api\n    ├── com.petersell.example.impl\n    └── com.petersell.example.doc\n        ├── modules\n        └── antora.yml\n com.petersell.anotherexample\n    └── com.petersell.anotherexample.doc\n        ├── modules\n        └── antora.yml\nantora-test-playbook.yml\nui-bundle.zip\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_2_playbook_datei_erstellen\"\u003e2) Playbook-Datei erstellen\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDa ich neben den o.g. zwei lokalen Components-Verzeichnisse noch ein Beispielprojekt von Antora integrieren möchte, dass sich in einem Git-Repository befindet, musste ich meine Playbook-Datei \u003ccode\u003eantora-test-playbook.yml\u003c/code\u003e folgendermaßen gestalten.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003esite:\n  title: Antora Test Site \u003cb class=\"conum\"\u003e(1)\u003c/b\u003e\n  url: http://localhost\n  start_page: Startseite::index.adoc \u003cb class=\"conum\"\u003e(2)\u003c/b\u003e\ncontent:\n  sources:\n  - url: . \u003cb class=\"conum\"\u003e(3)\u003c/b\u003e\n    branches: HEAD \u003cb class=\"conum\"\u003e(4)\u003c/b\u003e\n    start_path: com.petersell.example/com.petersell.example.doc \u003cb class=\"conum\"\u003e(5)\u003c/b\u003e\n  - url: https://gitlab.com/antora/demo/demo-component-b.git \u003cb class=\"conum\"\u003e(6)\u003c/b\u003e\n    branches: [v2.0, v1.0]\n    start_path: docs\n  - url: . \u003cb class=\"conum\"\u003e(7)\u003c/b\u003e\n    branches: HEAD\n    start_path: com.petersell.anotherexample/com.petersell.anotherexample.doc\nui:\n  bundle:\n  #\n    url: ./ui-bundle.zip \u003cb class=\"conum\"\u003e(8)\u003c/b\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"colist arabic\"\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eDer Titel erscheint im Output links oben in der Kopf-Navigationsleiste.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDer linke Teil (vor den zweifachen Doppelpunkten) gibt den Namen der Startseite wider. Sie finden diesen in der \u003ccode\u003eantora.yml\u003c/code\u003e des jeweiligen Ordners hinter dem Attribut \u003ccode\u003ename\u003c/code\u003e. Der rechte Teil gibt den Pfad inklusive Dateiname der Startseiten-Datei aus. Hier ist die Startseite im ROOT-Verzeichnis.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIst die Component lokal auf Ihrem Rechner, setzen Sie den Punkt.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIst die Component lokal auf Ihrem Rechner, schreiben Sie \u003ccode\u003eHEAD\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDer Pfad zum jeweiligen Component-Verzeichnis inklusive dem Verzeichnisnamen, hier \u003ccode\u003ecom.petersell.example.doc\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDie Syntax für eine Component in einem Git-Repository. Hier ist es eine Beispieldokumentation von Antora.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDie zweite lokale Component. Gehen Sie analog der ersten Component vor.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDas lokale UI-Theme. Dies könnte auch die URL zu einem Git-Repository inklusive der ZIP-Datei sein.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_3_antora_output_generieren\"\u003e3) Antora-Output generieren\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEröffnen Sie im \u003cem\u003eAntora-Arbeitsverzeichnis\u003c/em\u003e eine PowerShell und setzen Sie folgenden Build-Befehl ab.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eAntora-Buildbefehl\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003eantora antora-test-playbook.yml --stacktrace\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHöchstwahrscheinlich werden Sie eine Fehlermeldung erhalten.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eFehlermeldung\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003eError: Local content source must be a git repository: C:\\Users\\Andreas\\Dropbox\\antora (resolved from url: .)\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn diesem Fall öffnen Sie im \u003cem\u003eAntora-Arbeitsverzeichnis\u003c/em\u003e ein \u003ca href=\"https://gitforwindows.org/\" class=\"ext-link\" target=\"_blank\" rel=\"noopener\"\u003eGit-Bash-Fenster\u003c/a\u003e und geben die folgende Befehle auf einmal ein.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"../images/asciidoc-antora-test/gitvortaeuschen.png\" alt=\"Git-Bash-Fenster im Arbeitsverzeichnis\"\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eGit-Befehle kopieren\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003egit init .\ntouch .gitignore\ngit add .gitignore\ngit commit -m 'initialize repository'\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEröffnen Sie im \u003cem\u003eAntora-Arbeitsverzeichnis\u003c/em\u003e eine PowerShell und setzen nochmals den Build-Befehl ab.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eAusführen in der PowerShell\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003eantora antora-test-playbook.yml --stacktrace\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDer Befehl clont das externe Repository des Antora-Beispielprojekts. Im Ergebnis entsteht innerhalb des \u003cem\u003eAntora-Arbeitsverzeichnisses\u003c/em\u003e ein neuer Ordner \u003ccode\u003ebuild\u003c/code\u003e mit dem HTML-Output der drei Components.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e","date_modified":"2020-06-10T10:57:42+02:00","date_published":"2020-06-10T10:57:42+02:00","id":"https://www.petersell.com/blog/asciidoc-antora-test/","summary":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAntora ist ein \u003cem\u003eStatic Site Generator\u003c/em\u003e für Technische Redakteure. Der Content wird in Asciidoc geschrieben und kann sich in verschiedenen Git-Repositorys befinden. Zum Testen sollen sich die Quelldateien jedoch lokal auf dem Rechner befinden.\u003c/p\u003e\n\u003c/div\u003e","tags":["asciidoc"],"title":"Antora-Output aus lokalen Quellen generieren","url":"https://www.petersell.com/blog/asciidoc-antora-test/"},{"content_html":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAntora ist so etwas wie ein \u003cem\u003eStatic Site Generator\u003c/em\u003e für Technische Redakteure. Der Content wird in Asciidoc geschrieben und kann sich in verschiedenen Git-Repositorys befinden.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"toc\" class=\"toc\"\u003e\n\u003cdiv id=\"toctitle\" class=\"title\"\u003e\u003c/div\u003e\n\u003cul class=\"sectlevel1\"\u003e\n\u003cli\u003e\u003ca href=\"#_quellen\"\u003eQuellen\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_kontext\"\u003eKontext\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_1_update_node_js_für_windows_mit_installer\"\u003e1) Update Node.js für Windows mit Installer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_2_antora_installieren\"\u003e2) Antora installieren\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_3_antora_demo_projekt_generieren\"\u003e3) Antora-Demo-Projekt generieren\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_quellen\"\u003eQuellen\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://docs.antora.org/antora/2.2/install/windows-requirements/\" class=\"ext-link\" target=\"_blank\" rel=\"noopener\"\u003eAntora-Dokumentation\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_kontext\"\u003eKontext\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDieser Artikel ist eine Dokumentation der Installation von Antora auf meinem Privatrechner. Das kann auf jedem anderen PC anders aussehen. Warum \u003cem\u003ePrivatrechner?\u003c/em\u003e Dieses Wort steht für die Kombination aus den begrenzten PC-Kenntnissen eine Redakteurs - aber gepaart mit vollen Adminrechten.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_1_update_node_js_für_windows_mit_installer\"\u003e1) Update Node.js für Windows mit Installer\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAuf \u003ca href=\"https://nodejs.org/en/download/\" class=\"bare\"\u003ehttps://nodejs.org/en/download/\u003c/a\u003e gilt es, den passenden Long Term Support-Installer zu downloaden. In meinem Fall \u003cem\u003eLTS Windows Installer (.msi) 64-bit\u003c/em\u003e. Führen Sie die Datei per Doppelklick aus.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eNach dem Installer habe ich noch das nachfolgende Skript \u003cem\u003eTools for Node.js Native Module Installation Script\u003c/em\u003e gestartet. Dies dauerte einige Minuten und installierte via Chocolatey jede Menge Komponenten.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"../images/asciidoc-antora-install/install-node4.png\" alt=\"Chocolatey-Installation\"\u003e\n\u003c/div\u003e\n\u003cdiv class=\"title\"\u003eFigure 1. Chocolatey-Installation\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDas Ergebnis in der PowerShell ergab diese Versionen.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003eC:\\Users\\Andreas\u0026gt; npm --version\n6.14.4\nC:\\Users\\Andreas\u0026gt; node --version\nv12.16.3\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_2_antora_installieren\"\u003e2) Antora installieren\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWie in der Antora-Dokumenation beschrieben, geben Sie den Installationsbefehl für eine globale Installation von Antora ein.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eAusführen in der PowerShell\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e$ npm i -g @antora/cli@2.2 @antora/site-generator-default@2.2\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAnschließend führen Sie \u003ccode\u003eantora version\u003c/code\u003e aus, um sich vom Erfolg der Installation zu überzeugen. Bei mir endete es in einer Fehlermeldung.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eFehlermeldung\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003eDie Datei \"C:\\Users\\Andreas\\AppData\\Roaming\\npm\\antora.ps1\" kann nicht geladen werden. Die Datei\n\"C:\\Users\\Andreas\\AppData\\Roaming\\npm\\antora.ps1\" ist nicht digital signiert. Sie können dieses Skript im aktuellen System nicht ausführen. Weitere Informationen zum Ausführen von Skripts und Festlegen der Ausführungsrichtlinie erhalten Sie unter \"about_Execution_Policies\" (https:/go.microsoft.com/fwlink/?LinkID=135170)..\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAuf der angegebenen URL von Microsoft https:/go.microsoft.com/fwlink/?LinkID=135170 wurde ich fündig.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"../images/asciidoc-antora-install/antora-version.png\" alt=\"Ausführungsrichtlinie ändern\"\u003e\n\u003c/div\u003e\n\u003cdiv class=\"title\"\u003eFigure 2. Ausführungsrichtlinie ändern\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEs gilt herauszufinden, welche Ausführungsrichtlinien innerhalb der PowerShell für mich als Nutzer gelten:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eAusführen in der PowerShell\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003eGet-ExecutionPolicy -Scope CurrentUser\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFür mich auf dem Windows-Client galt \u003cem\u003eUndefined\u003c/em\u003e. Um meine Rechte auf der PowerShell meines Rechners zu erweitern, musste ich eingeben:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eAusführen in der PowerShell\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003eSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEin nochmaliges Ausführen von \u003ccode\u003eantora version\u003c/code\u003e gab die korrekte Versionsnummer \u003ccode\u003e2.2.0\u003c/code\u003e zurück.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_3_antora_demo_projekt_generieren\"\u003e3) Antora-Demo-Projekt generieren\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eUm zu einem schnellen Ergebnis zu kommen, habe ich das Beispielprojekt \u003cem\u003eDemo Docs Site\u003c/em\u003e auf \u003ca href=\"https://gitlab.com/antora/demo/docs-site\" class=\"bare\"\u003ehttps://gitlab.com/antora/demo/docs-site\u003c/a\u003e generiert. Um es clonen zu können, habe ich mir einen Gitlab-Account angelegt. Für diesen Account musste ich mir ein \u003ca href=\"https://www.hrz.tu-darmstadt.de/speicherplatz_datensicherung_und_server/virtuelle_server/anleitung_sammlung/artikel_details_22784.de.jsp\" class=\"ext-link\" target=\"_blank\" rel=\"noopener\"\u003eSSH-Key einrichten\u003c/a\u003e und in den Nutzer-Einstellungen unter \u003cem\u003eSSH-Keys\u003c/em\u003e hinterlegen. Nun konnte ich das Beispielprojekt \u003cem\u003eDemo Docs Site\u003c/em\u003e fehlerfrei clonen.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"../images/asciidoc-antora-install/clone-beispielrepo2.png\" alt=\"Beispielrepo clonen\"\u003e\n\u003c/div\u003e\n\u003cdiv class=\"title\"\u003eFigure 3. Beispielprojekt clonen\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eÖffnen Sie ein PowerShell-Fenster im neu entstandenen Ordner \u003ccode\u003edocs-site\u003c/code\u003e und geben Sie den Build-Befehl ein.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eAusführen in der PowerShell\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003eC:\\Daten\\antora\\docs-site\u0026gt; antora antora-playbook.yml\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDer Befehl clont zwei Repositorys. Im Ergebnis entsteht innerhalb des Ordners \u003ccode\u003edocs-site\u003c/code\u003e ein neuer Ordner \u003ccode\u003ebuild\u003c/code\u003e mit dem HTML-Output des Beispielprojekts .\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e","date_modified":"2020-06-03T12:15:42+02:00","date_published":"2020-06-03T12:15:42+02:00","id":"https://www.petersell.com/blog/asciidoc-antora-install/","summary":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAntora ist so etwas wie ein \u003cem\u003eStatic Site Generator\u003c/em\u003e für Technische Redakteure. Der Content wird in Asciidoc geschrieben und kann sich in verschiedenen Git-Repositorys befinden.\u003c/p\u003e\n\u003c/div\u003e","tags":["asciidoc"],"title":"Antora lokal installieren","url":"https://www.petersell.com/blog/asciidoc-antora-install/"},{"content_html":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSolange man als Blogger nur wenige Artikel hat, kann man den Hugo-Ordner \u003ccode\u003epublic\u003c/code\u003e via FTP auf den Webserver kopieren. Werden es mehr Blogposts, werden Dienste wie Netlify unausweichlich.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_quelle\"\u003eQuelle\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.patrickpeeters.com/2019/09/asciidoc-support-for-hugo-on-netlify/\" class=\"ext-link\" target=\"_blank\" rel=\"noopener\"\u003eAsciiDoc support for Hugo on Netlify\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_abenteuer_netlify\"\u003eAbenteuer Netlify\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAls das Kopieren meines Output-Ordners auf meinen Webserver 5 Minuten dauerte, war klar, dass das kein Bloggen mehr ist, sondern eine Qual. Ich wußte nie, was \u003cem\u003eDeployen\u003c/em\u003e bedeutet, jetzt ahnte ich es. Im Netz war meistens vom Dienst \u003cem\u003eNetlify\u003c/em\u003e die Rede, wenn es um das Bereitstellen von Hugo-Output auf einen Webserver ging. Bestimmt gibt es auch andere Dienste. Aber als ich obige Quelle fand, stand meine Wahl für \u003cem\u003eNetlify\u003c/em\u003e fest.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDie erste Begegnung mit dem Dienst war schaurig. Man braucht ein hohes Verzweiflungspotential, um in der Benutzerführung von Netlify nicht sofort zu verzweifeln. So wird der Nutzer 3 Schritte mittels einer großen \u003cem\u003eWeiter\u003c/em\u003e-Schaltfläche geleitet, um dann im 4. Schritt lediglich auf einen kleinen Repository-Namen klicken zu müssen, damit es weiter geht. Hat man diese Klippe überwunden, erwarten einen jede Menge Fehlermeldungen, die es erstmal zu finden und zu dechiffrieren gilt.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEin Abbruch gab es wegen einer PDF-Datei, ein zweiter wegen einer falschen Syntax meiner Hugo-Version. Auf folgende Fehlermeldung war ich gottseidank vorbereitet und entsprechend erleichert, als sie mir erschien.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode\u003e10:08:14 PM: Executing user command: hugo --gc --minify\n10:08:14 PM: Building sites …\n10:08:14 PM: ERROR 2020/04/29 20:08:14 asciidoctor / asciidoc not found in $PATH: Please install.\n10:08:14 PM: Leaving AsciiDoc content unrendered.\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_anpassungen_wegen_asciidoc\"\u003eAnpassungen wegen Asciidoc\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eNun schreibt Patrick Peeters:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"quoteblock\"\u003e\n\u003cblockquote\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eNetlify’s buildbot can install software on build, all you need is a Gemfile in the root folder of your project pointing at the right software packages, in my case that’s just asciidoctor.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"attribution\"\u003e\n\u0026#8212; Patrick Peeters\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWas zur Hölle ist ein \u003cem\u003eGemfile\u003c/em\u003e? Wieder halfen mir öffentliche Git-Repositorys: eine Datei mit Namen \u003ccode\u003eGemfile\u003c/code\u003e. Erstellen Sie also im Rootverzeichnis Ihres Hugo-Projektes eine Datei, benennen Sie sie \u003cem\u003eGemfile\u003c/em\u003e und tragen folgenden Text ein:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode\u003esource 'https://rubygems.org'\ngem 'asciidoctor'\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn einer Anleitung zu Netlify hatte ich gelernt, dass es ratsam ist, ebenfalls im Rootverzeichnis eine Datei namens \u003ccode\u003enetlify.toml\u003c/code\u003e anzulegen. So Sie auch eine haben, müssen Sie den Build-Befehl folgendermaßen anpassen:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode\u003e[build]\npublish = \"public\"\ncommand = \"bundle \u0026amp;\u0026amp; hugo --minify\"\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWenn Sie jetzt Ihr Hugo-Projekt mit den angepassten Dateien \u003ccode\u003eGemfile\u003c/code\u003e und \u003ccode\u003enetlify.toml\u003c/code\u003e in den Masterbranch hochladen, sollte der \u003cem\u003eDeploy\u003c/em\u003e fehlerfrei laufen und zumindest der Asciidoc-Inhalt korrekt ausgegeben werden.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_theme_im_ursprungszustand\"\u003eTheme im Ursprungszustand\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAls Hugo-Theme habe ich mich für das Theme \u003ca href=\"https://github.com/foo-dogsquared/hugo-theme-contentful\" class=\"ext-link\" target=\"_blank\" rel=\"noopener\"\u003eContentful\u003c/a\u003e entschieden. Da dies ein sehr minimalistisches Theme ist, musste ich viel nacharbeiten. Um so größer war der Schreck, als nach erfolgreichem \u003cem\u003eDeploy\u003c/em\u003e meine Webseite so gut wie nackt war: nämlich im Urzustand des Original-Themes.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eJetzt war ich zugegebenermaßen etwas müde. Da ich wußte, dass ich nicht so schnell auf ein anderes Theme umschwenken werde, habe ich kurzerhand die Theme-Dateien in die Hugo-Standard-Ordner verschoben und das Verzeichnis \u003ccode\u003ethemes\u003c/code\u003e komplett gelöscht. Nach einem nächsten Upload in den Masterbranch war alles so schön grün wie nach einem lokalen \u003ccode\u003ehugo server\u003c/code\u003e-Aufruf.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e","date_modified":"2020-05-01T17:29:38+02:00","date_published":"2020-05-01T17:29:38+02:00","id":"https://www.petersell.com/blog/hugo-asciidoc-netlify/","summary":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSolange man als Blogger nur wenige Artikel hat, kann man den Hugo-Ordner \u003ccode\u003epublic\u003c/code\u003e via FTP auf den Webserver kopieren. Werden es mehr Blogposts, werden Dienste wie Netlify unausweichlich.\u003c/p\u003e\n\u003c/div\u003e","tags":["hugo","asciidoc"],"title":"Hugo mit Asciidoc - Webseite mit Netlify bereitstellen","url":"https://www.petersell.com/blog/hugo-asciidoc-netlify/"},{"content_html":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWenn ich im CMS Hugo statt Markdown Asciidoc nutze, wie kann ich dann auf einen anderen Beitrag verlinken?.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBeide adoc-Dateien liegen im selben Verzeichnis:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"literalblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e|-- content\n    |-- blog\n        |-- teamwork-manifest.adoc\n        └-- teamwork-manifest-warum.adoc\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn der Datei \u003ccode\u003eteamwork-manifest-warum.adoc\u003c/code\u003e musste ich auf den Post \u003ccode\u003eteamwork-manifest.adoc\u003c/code\u003e verlinken. Folgende Notation für einen Inline-Link brachte Erfolg.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode class=\"language-asciidoc\" data-lang=\"asciidoc\"\u003eFünf Kollegen haben link:../teamwork-manifest/[ein Manifest] geschrieben.\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eHier die Demo: \u003ca href=\"../teamwork-manifest/\"\u003eklicke hier\u003c/a\u003e, um zum Post \u003cem\u003eManifest für eine menschliche Zusammenarbeit\u003c/em\u003e zu gelangen.\u003c/p\u003e\n\u003c/div\u003e","date_modified":"2020-04-28T14:43:14+02:00","date_published":"2020-04-28T14:43:14+02:00","id":"https://www.petersell.com/blog/hugo-auf-post-verlinken/","summary":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWenn ich im CMS Hugo statt Markdown Asciidoc nutze, wie kann ich dann auf einen anderen Beitrag verlinken?.\u003c/p\u003e\n\u003c/div\u003e","tags":["hugo"],"title":"Hugo mit Asciidoc - Auf anderen Post verlinken","url":"https://www.petersell.com/blog/hugo-auf-post-verlinken/"},{"content_html":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWie unterscheide ich im CMS Hugo Stock and Flow? Jeder, der sich mit Blogging beschäftigt, stößt eines Tages auf Robin Sloan und seinem Gleichnis vom \u003ca href=\"http://snarkmarket.com/2010/4890\" class=\"ext-link\" target=\"_blank\" rel=\"noopener\"\u003eStock and Flow\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"quoteblock\"\u003e\n\u003cblockquote\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003cstrong\u003eFlow\u003c/strong\u003e is the feed. It’s the posts and the tweets. It’s the stream of daily and sub-daily updates that reminds people you exist.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003cstrong\u003eStock\u003c/strong\u003e is the durable stuff. It’s the content you produce that’s as interesting in two months (or two years) as it is today. It’s what people discover via search. It’s what spreads slowly but surely, building fans over time.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"attribution\"\u003e\n\u0026#8212; Robin Sloan\u003cbr\u003e\n\u003ccite\u003ehttp://snarkmarket.com/2010/4890\u003c/cite\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn meinem alten \u003ca href=\"https://withknown.com/\" class=\"ext-link\" target=\"_blank\" rel=\"noopener\"\u003eCMS Known\u003c/a\u003e gab es nur einen Stream: längere eigene Texte und kurze Statusmeldungen wurden in einer \u003cem\u003eTimeline\u003c/em\u003e angezeigt. Doch sind eigene Essays und abgeschriebene Zitate von anderen Autoren wirklich von einem gleichen Gewicht? Nein. Also habe ich im CMS Hugo eine Trennung des Stock und Flows vorgenommen: \u003cem\u003eBlog\u003c/em\u003e ist der \u003cem\u003eStock\u003c/em\u003e und \u003cem\u003eStatus\u003c/em\u003e der \u003cem\u003eFlow\u003c/em\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn Hugo habe ich einfach sämtliche Blog-Layouts dupliziert und den Namen \u003cem\u003eStatus\u003c/em\u003e angepinnt. Jedoch wurden auf der Startseite der Homepage immer nur die Blogbeiträge ausgegeben - die Statusbeiträge fehlten. Jetzt wurde ich in der \u003ca href=\"https://gohugo.io/functions/where/#mainsections\" class=\"ext-link\" target=\"_blank\" rel=\"noopener\"\u003eHugo-Dokumentation\u003c/a\u003e fündig. Es gilt, in der Konfigurationsdatei \u003ccode\u003econfig.toml\u003c/code\u003e einen kleinen Eintrag vorzunehmen:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode\u003e[params]\n  mainSections = [\"blog\", \"status\"]\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e","date_modified":"2020-04-17T16:40:39+02:00","date_published":"2020-04-17T16:40:39+02:00","id":"https://www.petersell.com/blog/hugo-stock-and-flow/","summary":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWie unterscheide ich im CMS Hugo Stock and Flow? Jeder, der sich mit Blogging beschäftigt, stößt eines Tages auf Robin Sloan und seinem Gleichnis vom \u003ca href=\"http://snarkmarket.com/2010/4890\" class=\"ext-link\" target=\"_blank\" rel=\"noopener\"\u003eStock and Flow\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e","tags":["hugo"],"title":"Hugo mit Stock and Flow","url":"https://www.petersell.com/blog/hugo-stock-and-flow/"},{"content_html":"\u003cdiv id=\"preamble\"\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eLeider ist eine Selbstverständlichkeit wie das Einbinden von Bildern in der Kombination Hugo/Asciidoc etwas speziell. Das Markup ist Asciidoc, welches mit Asciidoctor in HTML umgewandelt wird. Nun hat aber das Hugo-CMS seinen eigenen Mechanismus, der mit Markdown auch wunderbar funktioniert.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eGottseidank fand ich auf Github den Quelltext des Blogs \u003ca href=\"https://foo-dogsquared.github.io\" class=\"bare\"\u003ehttps://foo-dogsquared.github.io\u003c/a\u003e mit einem einfachen Beispiel der Bildeinbindung.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock tip\"\u003e\n\u003ctable\u003e\n\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003cdiv class=\"title\"\u003eTipp\u003c/div\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\n\u003cdiv class=\"title\"\u003eVoraussetzung\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSie haben Hugo und Asciidoctor installiert.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_quellen\"\u003eQuellen\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"ulist\"\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://foo-dogsquared.github.io/blog/posts/blogging-with-asciidoctor-and-hugo/\"\u003eBlogging with Asciidoctor and Hugo\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://raw.githubusercontent.com/foo-dogsquared/blog/master/content/posts/blogging-with-asciidoctor-and-hugo.adoc\"\u003eBeispiel der Bildeinbindung\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_anleitung\"\u003eAnleitung\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_1_content_datei_editieren\"\u003e1. Content-Datei editieren\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSchreiben Sie Ihren Blogpost in der Datei \u003ccode\u003emeinblogpost.adoc\u003c/code\u003e und fügen das Bild im Text ein.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"literalblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003eimage::meinblogpost.gif[]\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEbenfalls in die Content-Datei kommt folgendes Asciidoc-Attribut.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"literalblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e:imagesdir: ../images/meinblogpostimage/\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDamit beim Neuanlegen einer adoc-Datei der Bildordner gleich korrekt ausgegeben wird, schreiben Sie in Ihrem Archetype \u003ccode\u003edefault.adoc\u003c/code\u003e folgende Notation in den Bereich der Asciidoc-Attribute (unterhalb des YAML-Headers):\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"literalblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e:imagesdir: ../images/{{ .File.BaseFileName }}/\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect2\"\u003e\n\u003ch3 id=\"_2_bild_abspeichern\"\u003e2. Bild abspeichern\u003c/h3\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eLegen Sie einen Ordner \u003ccode\u003eimages\u003c/code\u003e innerhalb des post-Ordners an.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"literalblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e|-- content\n    |-- post\n        └-- images\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDa Sie wissen, dass Ihre Bilddatei \u003ccode\u003emeinblogpost.gif\u003c/code\u003e heißt, legen Sie einen weiteren Ordner \u003ccode\u003emeinblogpost\u003c/code\u003e innerhalb des \u003ccode\u003eimages\u003c/code\u003e-Ordners an. In diesen kopieren Sie die Bilddatei zum Blogpost.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"literalblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e|-- content\n    |-- post\n        |-- images\n        |   └-- meinblogpost.gif\n        └-- meinblogpost.adoc\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_admonitions\"\u003eAdmonitions\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIch habe auf die kleinen Vignetten bzw. Icons für die Warnhinweise und Tipps verzichtet. Diese werden im Asciidoctor immer dann ausgegeben, wenn Sie in Asciidoc-Attributen folgenden Wert vermerken:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"literalblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e:icons: font\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIch habe also den CSS-Link für \u003cem\u003eFont Awesome\u003c/em\u003e wieder entfernt.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eInterne Einbindung\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u0026lt;link rel=\"stylesheet\" href=\"{{\"css/fa/css/all.css\" | absURL }}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eExterne Einbindung\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u0026lt;link href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\"/\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn meiner CSS wurden sämtliche Einträge zur class \u003ccode\u003e.admonitionblock\u003c/code\u003e überflüssig, die ich mir zuvor aus der \u003ccode\u003easciidoctor.css\u003c/code\u003e kopiert hatte.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e","date_modified":"2020-03-22T20:08:10+01:00","date_published":"2020-03-22T20:08:10+01:00","id":"https://www.petersell.com/blog/hugo-asciidoc-bilder-einbinden/","summary":"\u003cdiv id=\"preamble\"\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eLeider ist eine Selbstverständlichkeit wie das Einbinden von Bildern in der Kombination Hugo/Asciidoc etwas speziell. Das Markup ist Asciidoc, welches mit Asciidoctor in HTML umgewandelt wird. Nun hat aber das Hugo-CMS seinen eigenen Mechanismus, der mit Markdown auch wunderbar funktioniert.\u003c/p\u003e\n\u003c/div\u003e","tags":["hugo","asciidoc"],"title":"Hugo mit Asciidoc - Bilder einbinden","url":"https://www.petersell.com/blog/hugo-asciidoc-bilder-einbinden/"},{"content_html":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAsciiDoc ist eine vereinfachte Auszeichnungssprache ähnlich Markdown, die dazu dient, Texte in verschiedenen Dokumentenformaten zu veröffentlichen. Asciidoc wurde speziell für die Technische Dokumentation entwickelt und wird in vielen Git-Portalen als Dokumentationsstandard genutzt. Es hat jedoch nicht die Möglichkeiten der Wiederverwendung wie DITA-XML. Neuer Rechner, neuer Doktor: wie muss ich ihn installieren? Jetzt schreibe ich es auf, denn ich vergesse es jedes Mal.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"toc\" class=\"toc\"\u003e\n\u003cdiv id=\"toctitle\" class=\"title\"\u003e\u003c/div\u003e\n\u003cul class=\"sectlevel1\"\u003e\n\u003cli\u003e\u003ca href=\"#_ruby_installieren\"\u003eRuby installieren\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_asciidoctor_installieren\"\u003eAsciidoctor installieren\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_asciidoctor_für_pdf_installieren\"\u003eAsciidoctor für PDF installieren\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_ruby_installieren\"\u003e\u003ca class=\"anchor\" href=\"#_ruby_installieren\"\u003e\u003c/a\u003eRuby installieren\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"../images/asciidoc-asciidoctor-install/rubyinstall1.gif\" alt=\"rubyinstall1\"\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDer Installationsroutine folgen.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"../images/asciidoc-asciidoctor-install/rubyinstall2.gif\" alt=\"rubyinstall2\"\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_asciidoctor_installieren\"\u003e\u003ca class=\"anchor\" href=\"#_asciidoctor_installieren\"\u003e\u003c/a\u003eAsciidoctor installieren\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eÖffnen Sie eine Eingabeauforderung und geben Sie folgenden Befehl ein und drücken Sie [Enter].\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e$ gem install --http-proxy http://@proxy.\u0026lt;Proxyservername\u0026gt;.\u0026lt;Port\u0026gt; asciidoctor\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"../images/asciidoc-asciidoctor-install/asciidoctor-install.gif\" alt=\"asciidoctor install\"\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eArbeiten Sie ohne Proxyserver, genügt ein \u003ccode\u003egem install asciidoctor\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_asciidoctor_für_pdf_installieren\"\u003e\u003ca class=\"anchor\" href=\"#_asciidoctor_für_pdf_installieren\"\u003e\u003c/a\u003eAsciidoctor für PDF installieren\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e$ gem install --http-proxy http://@proxy.\u0026lt;Proxyservername\u0026gt;.\u0026lt;Port\u0026gt; asciidoctor-pdf --pre\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"../images/asciidoc-asciidoctor-install/asciidoctor-pdf.gif\" alt=\"asciidoctor pdf\"\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDas war´s. Sie können nun mit Hilfe von adoc-Dateien  \u003ca href=\"https://asciidoctor.org/docs/user-manual/#html\"\u003eOutput erzeugen\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e$ asciidoctor mysample.adoc\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e","date_modified":"2019-11-15T00:00:00Z","date_published":"2019-11-15T00:00:00Z","id":"https://www.petersell.com/blog/asciidoc-asciidoctor-install/","summary":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAsciiDoc ist eine vereinfachte Auszeichnungssprache ähnlich Markdown, die dazu dient, Texte in verschiedenen Dokumentenformaten zu veröffentlichen. Asciidoc wurde speziell für die Technische Dokumentation entwickelt und wird in vielen Git-Portalen als Dokumentationsstandard genutzt. Es hat jedoch nicht die Möglichkeiten der Wiederverwendung wie DITA-XML. Neuer Rechner, neuer Doktor: wie muss ich ihn installieren? Jetzt schreibe ich es auf, denn ich vergesse es jedes Mal.\u003c/p\u003e\n\u003c/div\u003e","tags":["asciidoc"],"title":"Asciidoctor auf Windows einrichten","url":"https://www.petersell.com/blog/asciidoc-asciidoctor-install/"},{"content_html":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEclipse eignet sich gut als Quelldateien-Editor. Damit die DITA-Dateien validiert werden können, gilt es, die DTDs einzubinden.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock tip\"\u003e\n\u003ctable\u003e\n\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003cdiv class=\"title\"\u003eTip\u003c/div\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\n\u003cdiv class=\"title\"\u003eVoraussetzung\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSie müssen das Java JDK und Eclipse installiert haben. Ein Java JRE war in meinem Fall nicht ausreichend.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv class=\"imageblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cimg src=\"../images/dita-fuer-eclipse/dita-fuer-eclipse.gif\" alt=\"DITA in Eclipse\"\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"olist arabic\"\u003e\n\u003col class=\"arabic\"\u003e\n\u003cli\u003e\n\u003cp\u003eKlicken Sie in Eclipse auf \u003cem\u003eWindow \u0026gt; Preferences\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eÖffnen Sie die Menüverzeichnisbaum unterhalb \u003cem\u003eXML\u003c/em\u003e und klicken Sie auf \u003cem\u003eXML Catalog\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eKlicken Sie im Fenster \u003cem\u003ePreferences\u003c/em\u003e auf \u003cem\u003eAdd\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eKlicken Sie auf \u003cem\u003eNext Catalog\u003c/em\u003e und anschließend auf \u003cem\u003eFile System\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSpringen Sie im Fenster \u003cem\u003eÖffnen\u003c/em\u003e auf die Datei \u003ccode\u003ecatalog-dita.xml\u003c/code\u003e im Hauptverzeichnis Ihres aktuellen DITA Open Toolkits.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e","date_modified":"2019-04-17T00:00:00Z","date_published":"2019-04-17T00:00:00Z","id":"https://www.petersell.com/blog/dita-fuer-eclipse/","summary":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eEclipse eignet sich gut als Quelldateien-Editor. Damit die DITA-Dateien validiert werden können, gilt es, die DTDs einzubinden.\u003c/p\u003e\n\u003c/div\u003e","tags":["dita-xml"],"title":"Einbinden der DITA-DTDs in Eclipse","url":"https://www.petersell.com/blog/dita-fuer-eclipse/"},{"content_html":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFür längere Texte und Anleitungen hatte ich bisher viele CMS genutzt: Wordpress, Kirby, Hugo und Known. Doch keines der CMS kannte ein Austauschformat. Jeder Text wurde in die jeweilige Datenbank abgelegt. Mit jedem Umzug gingen Texte verloren. Nun brachte \u003ca href=\"https://www.tomswan.com/\"\u003eTom Swan\u003c/a\u003e mich auf die Idee, es mit Asciidoc zu versuchen. Hier die wichtigsten Schritte.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"admonitionblock note\"\u003e\n\u003ctable\u003e\n\u003ctr\u003e\n\u003ctd class=\"icon\"\u003e\n\u003cdiv class=\"title\"\u003eNote\u003c/div\u003e\n\u003c/td\u003e\n\u003ctd class=\"content\"\u003e\n\u003cdiv class=\"title\"\u003eUpdate\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eInzwischen nutze ich das CMS Hugo. Nur mit Hilfe des Asciidoctors HTML-Dateien zu erstellen, war doch sehr anstrengend.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\u003cdiv id=\"toc\" class=\"toc\"\u003e\n\u003cdiv id=\"toctitle\" class=\"title\"\u003e\u003c/div\u003e\n\u003cul class=\"sectlevel1\"\u003e\n\u003cli\u003e\u003ca href=\"#_metadaten_für_html_dateien_einrichten\"\u003eMetadaten für HTML-Dateien einrichten\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_asciidoc_css_anpassen\"\u003easciidoc.css anpassen\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_menüleiste_erstellen\"\u003eMenüleiste erstellen\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_inhaltsverzeichnis_einfügen\"\u003eInhaltsverzeichnis einfügen\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#_quelldateien_im_unterordner\"\u003eQuelldateien im Unterordner\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_metadaten_für_html_dateien_einrichten\"\u003e\u003ca class=\"anchor\" href=\"#_metadaten_für_html_dateien_einrichten\"\u003e\u003c/a\u003eMetadaten für HTML-Dateien einrichten\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eSie können mit einer HTML-Datei \u003ca href=\"https://asciidoctor.org/docs/user-manual/#docinfo-file\"\u003edocinfo.html\u003c/a\u003e und dem \u003ca href=\"https://asciidoctor.org/docs/user-manual/#attributes\"\u003eAttribut\u003c/a\u003e \u003ccode\u003e:docinfo:\u003c/code\u003e die Metadaten innerhalb des HTML-Headers erzeugen und im HTML-Output in jeder Datei einfügen. Erstellen Sie eine HTML-Datei und fügen Sie Ihre Metadaten ein. Z.B.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u0026lt;!-- docinfo.html --\u0026gt;\n\u0026lt;link rel=\"shortcut icon\" type=\"image/png\" href=\"images/petersell.ico\"\u0026gt;\n\u0026lt;meta property=\"og:title\" content=\"Andreas Petersell\" /\u0026gt;\n\u0026lt;meta property=\"og:site_name\" content=\"Andreas Petersell\" /\u0026gt;\n\u0026lt;meta property=\"og:description\" content=\"Technical Writer (DITA XML) and Author\" /\u0026gt;\n\u0026lt;link href=\"https://twitter.com/petersell\" rel=\"me\" class=\"u-url\"/\u0026gt;\n\u0026lt;link href=\"https://www.petersell.com\" rel=\"me\" class=\"u-url\"/\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eKopieren Sie die \u003ccode\u003edocinfo.html\u003c/code\u003e  in das Quellhauptverzeichnis. Fügen Sie anschließend jeder Ihrer adoc-Dateien folgendes Attribut hinzu:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode\u003e:docinfo: shared\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eKopieren Sie abschließend ein Favicon-Datei in das Verzeichnis \u003ccode\u003e/images\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_asciidoc_css_anpassen\"\u003e\u003ca class=\"anchor\" href=\"#_asciidoc_css_anpassen\"\u003e\u003c/a\u003easciidoc.css anpassen\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eNach dem Build wird die Standard-CSS im Ausgabeordner abgelegt. Diese \u003ccode\u003easciidoctor.css\u003c/code\u003e  gilt es umzubennen und im Hauptverzeichnis der Quelldateien abzulegen. Nehmen Sie darin die gewünschten Änderungen vor. Meine Änderungswünsche waren z.B die Farbe grün für die Überschriften und Links. Auch gefiel mir die links ausgerichtete schwarze Fußleiste nicht.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eFarbe der Links\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003ea{color:#44aa00;text-decoration:underline;line-height:inherit}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"title\"\u003eFarbe der Fußleiste\u003c/div\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e#footer{max-width:1000px;background-color:rgba(255,255,255,.8);padding:1.25em}\n#footer-text{color:rgba(0,0,0,.8);line-height:1.44}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFügen Sie das Stylesheet Ihrem Buildbefehl hinzu.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode\u003easciidoctor -a linkcss -a stylesheet=petersell.css -D C:\\asciidoc\\out\\html 'C:\\asciidoc\\src\\**\\*.adoc'\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_menüleiste_erstellen\"\u003e\u003ca class=\"anchor\" href=\"#_menüleiste_erstellen\"\u003e\u003c/a\u003eMenüleiste erstellen\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDie Möglichkeit, ein kleines Menü mit Asciidoc zusammenstellen zu können, überzeugte mich letztendlich, via Asciidoc zu bloggen.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eMeine include-Datei, die das Menü mit zwei externen Weblinks enthält, siehe folgendermaßen aus:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e:home: index.html[Home]\n:doku: doku.html[Softwaredokumentation]\n\nlink:{home} | link:{doku} | https://www.petersell.com[Stream] | https://www.petersell.com/pages/impressum[Impressum]\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDiese include-Datei \u003ccode\u003einclude-menu.adoc\u003c/code\u003e habe ich in jeder Asciidoc-Datei unterhalb der Attribute eingebunden:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"literalblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003einclude::include-menu.adoc[]\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDiese hier aufgerufene HTML-Seite sieht als \u003ccode\u003edoku-asciidoc.adoc\u003c/code\u003e im Header folgendermaßen aus:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e:title: Asciidoc\n:sourcedir: ../\n:docinfo: shared\n:icons: font\n:sectanchors:\n:imagesdir: images\n:doctype: article\n:filename: doku-asciidoc\n:date: 22.01.2019\n\n   include::include-menu.adoc[]\n\n- - -\n\n== {title}\n\n- - -\n\n=== Eine Homepage mit Asciidoc erstellen\n\n[abstract]\nFür längere Texte und Anleitungen hatte ich bisher viele CMS genutzt: Wordpress, Kirby, Hugo und Known. Doch keines der CMS kannte ein Austauschformat. Jeder Text wurde in die jeweilige Datenbank abgelegt. Mit jedem Umzug gingen Texte verloren. Nun brachte {web-tomswan} mich auf die Idee, es mit Asciidoc zu versuchen. Hier die wichtigsten Schritte.\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_inhaltsverzeichnis_einfügen\"\u003e\u003ca class=\"anchor\" href=\"#_inhaltsverzeichnis_einfügen\"\u003e\u003c/a\u003eInhaltsverzeichnis einfügen\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eWenn Sie auf bestimmten Seiten ein Inhaltsverzeichnis erstellen möchten, fügen Sie diese beiden Attribute ein:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre\u003e:toc-title: Inhalt\n:toc: macro\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAn die Stelle in der adoc-Datei, wo das Inhaltsverzeichnis erscheinen soll, fügen Sie \u003ccode\u003etoc::[]\u003c/code\u003e ein.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_quelldateien_im_unterordner\"\u003e\u003ca class=\"anchor\" href=\"#_quelldateien_im_unterordner\"\u003e\u003c/a\u003eQuelldateien im Unterordner\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eLiegen manche Quelldateien in einem Unterordner, könnten folgnde Attribute hilfereich sein:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode class=\"language-asciidoc\" data-lang=\"asciidoc\"\u003e:sourcedir: ../\n:docinfodir: ../\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e","date_modified":"2019-01-22T00:00:00Z","date_published":"2019-01-22T00:00:00Z","id":"https://www.petersell.com/blog/asciidoc-homepage-mit-asciidoctor/","summary":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFür längere Texte und Anleitungen hatte ich bisher viele CMS genutzt: Wordpress, Kirby, Hugo und Known. Doch keines der CMS kannte ein Austauschformat. Jeder Text wurde in die jeweilige Datenbank abgelegt. Mit jedem Umzug gingen Texte verloren. Nun brachte \u003ca href=\"https://www.tomswan.com/\"\u003eTom Swan\u003c/a\u003e mich auf die Idee, es mit Asciidoc zu versuchen. Hier die wichtigsten Schritte.\u003c/p\u003e\n\u003c/div\u003e","tags":["asciidoc"],"title":"Eine Homepage mit Asciidoctor erstellen","url":"https://www.petersell.com/blog/asciidoc-homepage-mit-asciidoctor/"},{"content_html":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003e ist ein Open Source Webseiten-Generator für statische Seiten. Das Theme Minimo erstellt die Links unterhalb eines Blogposts für Weiter und Zurück automatisch – nur leider genau umgekehrt, wie ich es für meine Texte gebrauchen kann. Bei Blogposts landet der aktuellste Post oben. Bei belletristischen Texten wird das erste Kapitel zuerst geschrieben, soll aber auch an erster (oben) Stelle bleiben. Kurz und gut: ich wollte eine Möglichkeit haben, Hugo-Seiten manuell zu verbinden. Bei Kapitel 1 landet der Leser nach Klick auf Weiter beim Kapitel 2. Eigentlich logisch, im CMS Hugo aber nicht so einfach.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_template_weiche_einrichten\"\u003eTemplate-Weiche einrichten\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDie Weiter-Zurück-Navigation befindet sich im Theme Minimo in der Template-Datei \u003ccode\u003elayouts\\_default\\partials\\nav\\entry_nav.html\u003c/code\u003e. Dieses sogenannte Partial wiederum wird aufgerufen in der Layoutdatei \u003ccode\u003esingle.html\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eFür die Blogposts wollte ich die bisherige Weiter-Navigation haben (aktuellster Post zuoberst). Für die Romankapitel wollte ich eine neue Navigation einrichten. Benötigt wurde eine “Weiche”. Bei \u003ca href=\"https://thomas-leister.de/einfuehrung-in-hugo-theme-erstellen/\"\u003eThomas Leister\u003c/a\u003e wurde ich fündig. Meine Datei \u003ccode\u003esingle.html\u003c/code\u003e bekam folgende “Weiche”.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode\u003e{{ if eq .Type \"novel\" }}\n    {{ partial \"nav/entry_nav-novel.html\" . }}\n{{ else }}\n    {{ partial \"nav/entry_nav.html\" . }}\n{{ end }}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eIn meine Content-Dateien für den Roman musste ich noch einen Variable für den Typ einfügen: \u003ccode\u003etype: novel\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e---\ntitle: gero_prolog\nlinktitle: 1_gero-prolog\ntype: novel\ndate: 2017-10-01\nnextpage: novel/version-eins/2_michael-01/\n---\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"sect1\"\u003e\n\u003ch2 id=\"_neue_partial_datei_erschaffen\"\u003eNeue Partial-Datei erschaffen\u003c/h2\u003e\n\u003cdiv class=\"sectionbody\"\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eDie oben erwähnte Partial-Datei \u003ccode\u003eentry_nav.html\u003c/code\u003e habe ich kopiert und umbenannt in \u003ccode\u003eentry_nav-novel.html\u003c/code\u003e. Bei Blogposts kommt die Original-Datei zum Einsatz, bei Pages im Ordner \u003ccode\u003enovel\u003c/code\u003e wird die neue Datei herangezogen.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eBeim Weiter-Link den Titel des nächsten Kapitels einzublenden, habe ich nicht geschafft. Darum habe ich ihn weggelassen. In einer Sequenz sorgt das für mehr Übersichtlichkeit. Bei den Blogpost wird weiterhin der Titel des nächsten Blogposts ausgegen.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003eAusgehend vom vorhandenen Minimo-Template \u003ccode\u003eentry_nav.html\u003c/code\u003e habe ich mein Template durch Trial and Error folgendermaßen in der Datei \u003ccode\u003eentry_nav-novel.html\u003c/code\u003e angepasst.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"listingblock\"\u003e\n\u003cdiv class=\"content\"\u003e\n\u003cpre class=\"highlight\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u0026lt;nav class='entry-nav'\u0026gt;\n  \u0026lt;div class='container'\u0026gt;\n\n    {{- if $.Params.prevpage -}}\n    \u0026lt;div class='prev-entry sep-before'\u0026gt;\n\t \u0026lt;a href='{{ $.Params.prevpage | relURL }}'\u0026gt;\n        \u0026lt;span aria-hidden='true'\u0026gt;\n          {{- partial \"svg/icons\" \"prev\" -}}\n          {{- print \" \" ( i18n \"previous\" ) -}}\n        \u0026lt;/span\u0026gt;\n        \u0026lt;span class='screen-reader-text'\u0026gt;{{ i18n \"previousPost\" }}: \u0026lt;/span\u0026gt;\n     \u0026lt;/a\u0026gt;\n    \u0026lt;/div\u0026gt;\n    {{- end -}}\n\n    {{- if $.Params.nextpage -}}\n    \u0026lt;div class='next-entry sep-before'\u0026gt;\n\t \u0026lt;a href='{{ $.Params.nextpage | relURL }}'\u0026gt;\n\t    \u0026lt;span class='screen-reader-text'\u0026gt;{{ i18n \"nextPost\" }}: \u0026lt;/span\u0026gt;\n        \u0026lt;span aria-hidden='true'\u0026gt;\n          {{- print ( i18n \"next\" ) \" \" -}}\n          {{- partial \"svg/icons\" \"next\" -}}\n        \u0026lt;/span\u0026gt;\n\t  \u0026lt;/a\u0026gt;\n    \u0026lt;/div\u0026gt;\n    {{- end -}}\n\n  \u0026lt;/div\u0026gt;\n\u0026lt;/nav\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e","date_modified":"2018-08-20T00:00:00Z","date_published":"2018-08-20T00:00:00Z","id":"https://www.petersell.com/blog/hugo-minimo-weiterlink/","summary":"\u003cdiv class=\"paragraph\"\u003e\n\u003cp\u003e\u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003e ist ein Open Source Webseiten-Generator für statische Seiten. Das Theme Minimo erstellt die Links unterhalb eines Blogposts für Weiter und Zurück automatisch – nur leider genau umgekehrt, wie ich es für meine Texte gebrauchen kann. Bei Blogposts landet der aktuellste Post oben. Bei belletristischen Texten wird das erste Kapitel zuerst geschrieben, soll aber auch an erster (oben) Stelle bleiben. Kurz und gut: ich wollte eine Möglichkeit haben, Hugo-Seiten manuell zu verbinden. Bei Kapitel 1 landet der Leser nach Klick auf Weiter beim Kapitel 2. Eigentlich logisch, im CMS Hugo aber nicht so einfach.\u003c/p\u003e\n\u003c/div\u003e","tags":["hugo"],"title":"Weiterblättern im Hugo-Theme Minimo","url":"https://www.petersell.com/blog/hugo-minimo-weiterlink/"}]}