<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on Andreas Petersell</title>
    <link>http://localhost:1313/tags/hugo/</link>
    <description>Recent content in Hugo on Andreas Petersell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <copyright>Sämtliche Beiträge stehen unter einer [Creative Commons Namensnennung 4.0 International Lizenz](https://creativecommons.org/licenses/by/4.0/).</copyright>
    <lastBuildDate>Mon, 19 May 2025 15:40:36 +0000</lastBuildDate>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    
        <atom:link href="http://localhost:1313/tags/hugo/index.rss" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Verification of your Subdomain for a gitlab Project</title>
      <link>http://localhost:1313/blog/verification-of-your-subdomain-for-gitlab-project/</link>
      <category>hugo</category>
      <category>blogging</category>
      <pubDate>Mon, 19 May 2025 15:40:36 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/verification-of-your-subdomain-for-gitlab-project/</guid>
      <description>&lt;p&gt;You have a project on gitlab with the URL &lt;em&gt;myname.gitlab.io/project&lt;/em&gt; and would now like to redirect your subdomain &lt;em&gt;&lt;a href=&#34;https://www.myname.com&#34;&gt;www.myname.com&lt;/a&gt;&lt;/em&gt; to your project in addition to your root domain &lt;em&gt;myname.com&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Quelle: &lt;a href=&#34;https://docs.gitlab.com/user/project/pages/custom_domains_ssl_tls_certification/&#34;&gt;GitLab Pages custom domains&lt;/a&gt;&lt;/p&gt;
&lt;!-- FM:Snippet:Start data:{&#34;id&#34;:&#34;Admonition - Voraussetzung&#34;,&#34;fields&#34;:[]} --&gt;
&lt;style type=&#34;text/css&#34;&gt;
     
    .notice {
        --title-color: #fff;
        --title-background-color: #6be;
        --content-color: #444;
        --content-background-color: #e7f2fa;
    }

    .notice.comment {
        --title-background-color: #99bda2;
        --content-background-color: #efe;
    }

    .notice.info {
        --title-background-color: #fb7;
        --content-background-color: #fec;
    }

    .notice.tip {
        --title-background-color: #5a5;
        --content-background-color: #efe;
    }

    .notice.warning {
        --title-background-color: #c33;
        --content-background-color: #fee;
    }


     
    .notice {
        padding: 18px;
        line-height: 24px;
        margin-bottom: 24px;
        margin-top: 26px;
        border-radius: 4px;
        color: var(--content-color);
        background: var(--content-background-color);
    }

    .notice p:last-child {
        margin-bottom: 0
    }

     
    .notice-title {
        margin: -18px -18px 12px;
        padding: 4px 18px;
        border-radius: 4px 4px 0 0;
        font-weight: 700;
        color: var(--title-color);
        background: var(--title-background-color);
    }

     
    .icon-notice {
        display: inline-flex;
        align-self: center;
        margin-right: 8px;
    }

    .icon-notice img,
    .icon-notice svg {
        height: 1em;
        width: 1em;
        fill: currentColor;
    }

    .icon-notice img,
    .icon-notice.baseline svg {
        top: .125em;
        position: relative;
    }
&lt;/style&gt;&lt;div class=&#34;notice info&#34; &gt;
    &lt;p class=&#34;notice-title&#34;&gt;
        &lt;span class=&#34;icon-notice baseline&#34;&gt;
            &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;92 59.5 300 300&#34;&gt;
  &lt;path d=&#34;M292 303.25V272c0-3.516-2.734-6.25-6.25-6.25H267v-100c0-3.516-2.734-6.25-6.25-6.25h-62.5c-3.516 0-6.25 2.734-6.25 6.25V197c0 3.516 2.734 6.25 6.25 6.25H217v62.5h-18.75c-3.516 0-6.25 2.734-6.25 6.25v31.25c0 3.516 2.734 6.25 6.25 6.25h87.5c3.516 0 6.25-2.734 6.25-6.25Zm-25-175V97c0-3.516-2.734-6.25-6.25-6.25h-37.5c-3.516 0-6.25 2.734-6.25 6.25v31.25c0 3.516 2.734 6.25 6.25 6.25h37.5c3.516 0 6.25-2.734 6.25-6.25Zm125 81.25c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

        &lt;/span&gt;Voraussetzung&lt;/p&gt;&lt;p&gt;You have access to the DNS entries of your domains with your web hosting service provider.&lt;/p&gt;&lt;/div&gt;

&lt;!-- FM:Snippet:End --&gt;
&lt;h3 id=&#34;cname-worked-fine&#34;&gt;CNAME worked fine&lt;/h3&gt;
&lt;p&gt;This is not a guide, as every web host service provider uses different forms to enter the various DNS entries.&lt;/p&gt;
&lt;p&gt;Mine uses the following values:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Subdomain&lt;/th&gt;
&lt;th&gt;Domain&lt;/th&gt;
&lt;th&gt;Typ&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;www&lt;/td&gt;
&lt;td&gt;myname.com&lt;/td&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;myname.gitlab.io.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And so the CNAME entry worked immediately.&lt;/p&gt;
&lt;h3 id=&#34;verification-by-trial-and-error&#34;&gt;Verification by trial and error&lt;/h3&gt;
&lt;p&gt;But it took me days to complete the verification. The Gitlab documentation uses this syntax as a default and alludes to the command line level.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;_gitlab-pages-verification-code.www.myname.com TXT gitlab-pages-verification-code=31e837733dd7174ada938b64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, this example is not clear when filling in the form above. After several attempts, the following entry in the table worked.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Subdomain&lt;/th&gt;
&lt;th&gt;Domain&lt;/th&gt;
&lt;th&gt;Typ&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;_gitlab-pages-verification-code.www&lt;/td&gt;
&lt;td&gt;myname.com&lt;/td&gt;
&lt;td&gt;TXT&lt;/td&gt;
&lt;td&gt;gitlab-pages-verification-code=31e837733dd7174ada938b64&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The verification status finally turned green: &lt;em&gt;Verified!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At &lt;a href=&#34;https://dnschecker.org/&#34;&gt;https://dnschecker.org/&lt;/a&gt; you can check whether the TXT entries are recognized. Fill in &lt;em&gt;_gitlab-pages-verification-code.www.myname.com&lt;/em&gt; and select &lt;em&gt;TXT&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Die schönsten Geschenke</title>
      <link>http://localhost:1313/status/die-schoensten-geschenke/</link>
      <category>darumlebenwir</category>
      <category>hugo</category>
      <pubDate>Wed, 01 Jan 2025 17:40:08 +0000</pubDate>
      
      <guid>http://localhost:1313/status/die-schoensten-geschenke/</guid>
      <description>&lt;p&gt;macht man sich selbst.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/netlify-build.png&#34; alt=&#34;Netlify-Build erfolgreich&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ich habe meinen Zettelkasten von DITA-XML in Markdown umgewandelt und will ihn hier weiter fortführen. Dabei hatte es einige Fehler gegeben. Gottseidank habe ich bei Netlify das Buildprotokoll gefunden und konnte alles wieder geradebiegen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Admonitions in Markdown</title>
      <link>http://localhost:1313/blog/hugo-admonitions-in-markdown/</link>
      <category>hugo</category>
      <category>techcomm</category>
      <category>blogging</category>
      <pubDate>Sat, 07 Dec 2024 11:38:27 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/hugo-admonitions-in-markdown/</guid>
      <description>&lt;p&gt;In Markdown gibt es keine Möglichkeit, farbig umrahmte Absätze für Hinweise, Warnungen, Infos und Tipps zu gestalten. In Hugo bietet sich aber diese Möglichkeit durch sogenannte Shortcodes.&lt;/p&gt;
&lt;p&gt;Sogenannte Shortcodes werden in einer HTML-Datei abgelegt und müssen im Markdown-Content auf spezielle Weise eingefügt werden.&lt;/p&gt;
&lt;p&gt;Quelle: &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/martignoni/hugo-notice&#34;&gt;hugo-notice von Nicolas Martignoni&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;anleitung&#34;&gt;Anleitung&lt;/h2&gt;
&lt;p&gt;Da ich mein Template &lt;strong&gt;nicht&lt;/strong&gt; im Ordner &lt;code&gt;themes&lt;/code&gt; als git-submodule betreibe, kopiere ich alles in meinen lokalen &lt;code&gt;layouts&lt;/code&gt;-Ordner und synchronisiere diesen zugleich mit meinen Content-Dateien.&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;
     
    .notice {
        --title-color: #fff;
        --title-background-color: #6be;
        --content-color: #444;
        --content-background-color: #e7f2fa;
    }

    .notice.comment {
        --title-background-color: #99bda2;
        --content-background-color: #efe;
    }

    .notice.info {
        --title-background-color: #fb7;
        --content-background-color: #fec;
    }

    .notice.tip {
        --title-background-color: #5a5;
        --content-background-color: #efe;
    }

    .notice.warning {
        --title-background-color: #c33;
        --content-background-color: #fee;
    }


     
    .notice {
        padding: 18px;
        line-height: 24px;
        margin-bottom: 24px;
        margin-top: 26px;
        border-radius: 4px;
        color: var(--content-color);
        background: var(--content-background-color);
    }

    .notice p:last-child {
        margin-bottom: 0
    }

     
    .notice-title {
        margin: -18px -18px 12px;
        padding: 4px 18px;
        border-radius: 4px 4px 0 0;
        font-weight: 700;
        color: var(--title-color);
        background: var(--title-background-color);
    }

     
    .icon-notice {
        display: inline-flex;
        align-self: center;
        margin-right: 8px;
    }

    .icon-notice img,
    .icon-notice svg {
        height: 1em;
        width: 1em;
        fill: currentColor;
    }

    .icon-notice img,
    .icon-notice.baseline svg {
        top: .125em;
        position: relative;
    }
&lt;/style&gt;&lt;div class=&#34;notice info&#34; &gt;
    &lt;p class=&#34;notice-title&#34;&gt;
        &lt;span class=&#34;icon-notice baseline&#34;&gt;
            &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;92 59.5 300 300&#34;&gt;
  &lt;path d=&#34;M292 303.25V272c0-3.516-2.734-6.25-6.25-6.25H267v-100c0-3.516-2.734-6.25-6.25-6.25h-62.5c-3.516 0-6.25 2.734-6.25 6.25V197c0 3.516 2.734 6.25 6.25 6.25H217v62.5h-18.75c-3.516 0-6.25 2.734-6.25 6.25v31.25c0 3.516 2.734 6.25 6.25 6.25h87.5c3.516 0 6.25-2.734 6.25-6.25Zm-25-175V97c0-3.516-2.734-6.25-6.25-6.25h-37.5c-3.516 0-6.25 2.734-6.25 6.25v31.25c0 3.516 2.734 6.25 6.25 6.25h37.5c3.516 0 6.25-2.734 6.25-6.25Zm125 81.25c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

        &lt;/span&gt;Voraussetzung&lt;/p&gt;&lt;p&gt;Sie müssen in der &lt;code&gt;config.toml&lt;/code&gt; angeben, ob Sie auf Ihrer Webseite mit einer Standardsprache arbeiten, oder mehrere, nahezu gleichberechtigte Sprachen nutzen. Da ich Deutsch als Standardsprache nutze, habe ich in die &lt;code&gt;config.toml&lt;/code&gt; diesen Eintrag hinzugefügt: &lt;code&gt;defaultContentLanguage = &#39;de&#39;&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;

&lt;h3 id=&#34;einmaliges-einrichten&#34;&gt;Einmaliges Einrichten&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; - Laden Sie das Zip-Archiv vom &lt;a href=&#34;https://github.com/martignoni/hugo-notice&#34;&gt;git-Repository hugo-notice&lt;/a&gt; herunter und entpacken Sie es.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; - Legen Sie die Datei &lt;code&gt;notice.html&lt;/code&gt; in den Ordner &lt;code&gt;layouts/shortcodes&lt;/code&gt; ab.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt; - Kopieren Sie den Ordner &lt;code&gt;icons&lt;/code&gt; in Ihren Hauptordner des Repositorys, also auf gleicher Ebene wie den den Ordner &lt;code&gt;layouts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(4)&lt;/strong&gt; - Kopieren Sie den Ordner &lt;code&gt;i18n&lt;/code&gt; in Ihren Hauptordner des Repositorys, also auf gleicher Ebene wie den den Ordner &lt;code&gt;layouts&lt;/code&gt;. Löschen Sie die Dateien für die Sprachen, die Sie bestimmt nicht nutzen. Bei mir blieb nur die &lt;code&gt;de.yaml&lt;/code&gt; übrig.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(5)&lt;/strong&gt; - Editieren Sie im Ordner &lt;code&gt;i18n&lt;/code&gt; die Datei &lt;code&gt;de.yaml&lt;/code&gt;, so denn nötig. Ich habe z.B. die Übersetzung vom gelben Kasten &lt;em&gt;Information&lt;/em&gt; auf &lt;em&gt;Voraussetzung&lt;/em&gt; geändert.&lt;/p&gt;
&lt;h3 id=&#34;anwenden-im-markdown-content&#34;&gt;Anwenden im Markdown-Content&lt;/h3&gt;
&lt;p&gt;Sobald Sie die Admonitions benutzen möchten, fügen Sie z.B. für obiges gelbes Kästchen folgende Notation in Ihre Content-Datei ein:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;lt; notice info &amp;gt;}}
Sie müssen in der `config.toml` angeben, ob Sie auf Ihrer Webseite ...
{{&amp;lt; /notice &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;beispiel-für-eine-warnung&#34;&gt;Beispiel für eine Warnung&lt;/h3&gt;
&lt;div class=&#34;notice warning&#34; &gt;
    &lt;p class=&#34;notice-title&#34;&gt;
        &lt;span class=&#34;icon-notice baseline&#34;&gt;
            &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;126 76.5 300 300&#34;&gt;
  &lt;path d=&#34;M297.431 324.397v-34.255c0-3.245-2.344-5.95-5.358-5.95h-32.146c-3.014 0-5.358 2.705-5.358 5.95v34.255c0 3.245 2.344 5.95 5.358 5.95h32.146c3.014 0 5.358-2.705 5.358-5.95Zm-.335-67.428 3.014-82.753c0-1.081-.502-2.524-1.674-3.425-1.005-.902-2.512-1.983-4.019-1.983h-36.834c-1.507 0-3.014 1.081-4.019 1.983-1.172.901-1.674 2.704-1.674 3.786l2.846 82.392c0 2.344 2.512 4.146 5.693 4.146h30.975c3.013 0 5.525-1.803 5.692-4.146Zm-2.344-168.39L423.34 342.425c3.683 7.032 3.516 15.686-.335 22.717-3.85 7.031-10.883 11.358-18.417 11.358H147.413c-7.534 0-14.566-4.327-18.417-11.358-3.85-7.031-4.018-15.685-.335-22.716L257.248 88.578C260.93 81.188 268.13 76.5 276 76.5c7.87 0 15.069 4.688 18.752 12.08Z&#34;/&gt;
&lt;/svg&gt;

        &lt;/span&gt;Warnung&lt;/p&gt;&lt;p&gt;This is a warning notice. Be warned!&lt;/p&gt;&lt;/div&gt;

&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{&amp;lt; notice warning &amp;gt;}}
This is a warning notice. Be warned!
{{&amp;lt; /notice &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;weitere-quellen&#34;&gt;Weitere Quellen&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/i-need-help-with-i18n-translate-shortcode/39858&#34;&gt;Fehler bei Übersetzungen von Shortcodes &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/shortcode/&#34;&gt;gohugo.io - Create your own shortcodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Templates nutzen in FrontMatter CMS</title>
      <link>http://localhost:1313/blog/templates-nutzen-in-frontmatter-cms/</link>
      <category>hugo</category>
      <category>blogging</category>
      <pubDate>Wed, 04 Dec 2024 19:41:27 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/templates-nutzen-in-frontmatter-cms/</guid>
      <description>&lt;p&gt;Bisher habe ich meine Asciidoc- und Markdown-Dateien in VSCode erstellt. Das macht aber nicht so viel Spaß. Nun habe ich das &lt;a href=&#34;https://route360.dev/en/post/frontmatter-cms/&#34;&gt;Headless-CMS&lt;/a&gt; FrontMatter entdeckt. Statt zu tippen klicke ich jetzt auf Schaltflächen.&lt;/p&gt;
&lt;p&gt;Erstellen Sie schnell auf Grundlage einer Markdown-Datei (template) eine Kopie dieser mit neuem Dateinamen. Die Dokumentation spricht zwar vom Einsatz von Templates. Aber nirgendwo steht, wie man die eingerichteten Templates benutzt! Bis ich die Vorgehensweise zufällig im Video &lt;em&gt;How you can use content-types in Front Matter CMS&lt;/em&gt; vom Entwickler Elio Struyf entdeckte.&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;
     
    .notice {
        --title-color: #fff;
        --title-background-color: #6be;
        --content-color: #444;
        --content-background-color: #e7f2fa;
    }

    .notice.comment {
        --title-background-color: #99bda2;
        --content-background-color: #efe;
    }

    .notice.info {
        --title-background-color: #fb7;
        --content-background-color: #fec;
    }

    .notice.tip {
        --title-background-color: #5a5;
        --content-background-color: #efe;
    }

    .notice.warning {
        --title-background-color: #c33;
        --content-background-color: #fee;
    }


     
    .notice {
        padding: 18px;
        line-height: 24px;
        margin-bottom: 24px;
        margin-top: 26px;
        border-radius: 4px;
        color: var(--content-color);
        background: var(--content-background-color);
    }

    .notice p:last-child {
        margin-bottom: 0
    }

     
    .notice-title {
        margin: -18px -18px 12px;
        padding: 4px 18px;
        border-radius: 4px 4px 0 0;
        font-weight: 700;
        color: var(--title-color);
        background: var(--title-background-color);
    }

     
    .icon-notice {
        display: inline-flex;
        align-self: center;
        margin-right: 8px;
    }

    .icon-notice img,
    .icon-notice svg {
        height: 1em;
        width: 1em;
        fill: currentColor;
    }

    .icon-notice img,
    .icon-notice.baseline svg {
        top: .125em;
        position: relative;
    }
&lt;/style&gt;&lt;div class=&#34;notice tip&#34; &gt;
    &lt;p class=&#34;notice-title&#34;&gt;
        &lt;span class=&#34;icon-notice baseline&#34;&gt;
            &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

        &lt;/span&gt;Tipp&lt;/p&gt;&lt;p&gt;Wenn Sie vorhaben, über die Schaltfläche &lt;em&gt;Create Template&lt;/em&gt; ein Template zu erstellen, sichern Sie sich zuvor die Datei &lt;code&gt;frontmatter.json&lt;/code&gt;. Denn diese Vorgehensweise überschreibt gern diese Datei. Die folgende Anleitung verzichtet auf den Einsatz dieser Aktionsschaltfläche.&lt;/p&gt;&lt;/div&gt;

&lt;h3 id=&#34;template-erstellen&#34;&gt;Template erstellen&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; - Erstellen Sie einmalig einen Ordner &lt;code&gt;.frontmatter/templates&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; - Kopieren Sie eine Markdown-Datei in diesen neuen Ordner &lt;code&gt;templates&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt; - Passen Sie die Datei so an, dass sie Ihren Vorstellungen eines Templates enspricht. &lt;a href=&#34;https://frontmatter.codes/docs/content-creation/placeholders&#34;&gt;Platzhalter&lt;/a&gt; wie in der Datei &lt;code&gt;frontmatter.json&lt;/code&gt; sind nicht möglich.&lt;/p&gt;
&lt;p&gt;Sie können beliebig viele Template-Dateien erstellen. Beim Benutzen der Templates werden diese Ihnen in einer Auswahlliste angeboten.&lt;/p&gt;
&lt;h3 id=&#34;template-benutzen&#34;&gt;Template benutzen&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; - Klicken Sie in der linken Symbolschaltflächen-Leiste auf das Icon &lt;em&gt;Explorer&lt;/em&gt; und wechseln Sie in den VSCode-Dateiexplorer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; - Machen Sie einen rechten Mausklick auf den Content-Ordner, in der die neue Markdown-Datei angelegt werden soll. Z.B. &lt;code&gt;content/blog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt; - Wählen Sie im Kontextmenü den Eintrag &lt;em&gt;Frontmatter &amp;gt; New Article from template&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(4)&lt;/strong&gt; - Wählen Sie die entsprechende Template-Datei aus, auf dessen Grundlage die neue Datei entstehen soll.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(5)&lt;/strong&gt; - Editieren Sie die Datei wie gewohnt und passen Sie den YAML-Header an.&lt;/p&gt;
&lt;h3 id=&#34;weitere-quellen&#34;&gt;Weitere Quellen&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oA5ocNaiAtY&#34;&gt;Video: How you can use content-types in Front Matter CMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://frontmatter.codes/&#34;&gt;Frontmatter CMS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Hugo - Link im neuen Tab öffnen lassen</title>
      <link>http://localhost:1313/blog/hugo-cms-link-im-neuen-tab-oeffnen/</link>
      <category>hugo</category>
      <category>blogging</category>
      <pubDate>Mon, 02 Dec 2024 18:13:16 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/hugo-cms-link-im-neuen-tab-oeffnen/</guid>
      <description>&lt;p&gt;In Markdown kann man standardmäßig nur Links zu Webseiten erstellen, die im selben Tab öffnen, nicht jedoch in einem neuen Tab geöffnet werden mit Hilfe des Attributs &lt;code&gt;target=&amp;quot;_blank&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Da ich inzwischen für das Schreiben meiner Hugo-Blogposts das Headless-CMS &lt;a href=&#34;https://frontmatter.codes&#34;&gt;Frontmatter&lt;/a&gt; nutze, möchte ich für einfache Texte wieder vermehrt Markdown nutzen.&lt;/p&gt;
&lt;p&gt;Quelle: &lt;a href=&#34;https://discourse.gohugo.io/t/how-to-target--blank-in-md/524/19&#34;&gt;How to target blank in md?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;anleitung&#34;&gt;Anleitung&lt;/h3&gt;
&lt;p&gt;Das Attribut &lt;code&gt;target=&amp;quot;_blank&amp;quot;&lt;/code&gt; kann man mit Hilfe von Hugo-Shortcodes realisieren.&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;
     
    .notice {
        --title-color: #fff;
        --title-background-color: #6be;
        --content-color: #444;
        --content-background-color: #e7f2fa;
    }

    .notice.comment {
        --title-background-color: #99bda2;
        --content-background-color: #efe;
    }

    .notice.info {
        --title-background-color: #fb7;
        --content-background-color: #fec;
    }

    .notice.tip {
        --title-background-color: #5a5;
        --content-background-color: #efe;
    }

    .notice.warning {
        --title-background-color: #c33;
        --content-background-color: #fee;
    }


     
    .notice {
        padding: 18px;
        line-height: 24px;
        margin-bottom: 24px;
        margin-top: 26px;
        border-radius: 4px;
        color: var(--content-color);
        background: var(--content-background-color);
    }

    .notice p:last-child {
        margin-bottom: 0
    }

     
    .notice-title {
        margin: -18px -18px 12px;
        padding: 4px 18px;
        border-radius: 4px 4px 0 0;
        font-weight: 700;
        color: var(--title-color);
        background: var(--title-background-color);
    }

     
    .icon-notice {
        display: inline-flex;
        align-self: center;
        margin-right: 8px;
    }

    .icon-notice img,
    .icon-notice svg {
        height: 1em;
        width: 1em;
        fill: currentColor;
    }

    .icon-notice img,
    .icon-notice.baseline svg {
        top: .125em;
        position: relative;
    }
&lt;/style&gt;&lt;div class=&#34;notice info&#34; &gt;
    &lt;p class=&#34;notice-title&#34;&gt;
        &lt;span class=&#34;icon-notice baseline&#34;&gt;
            &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;92 59.5 300 300&#34;&gt;
  &lt;path d=&#34;M292 303.25V272c0-3.516-2.734-6.25-6.25-6.25H267v-100c0-3.516-2.734-6.25-6.25-6.25h-62.5c-3.516 0-6.25 2.734-6.25 6.25V197c0 3.516 2.734 6.25 6.25 6.25H217v62.5h-18.75c-3.516 0-6.25 2.734-6.25 6.25v31.25c0 3.516 2.734 6.25 6.25 6.25h87.5c3.516 0 6.25-2.734 6.25-6.25Zm-25-175V97c0-3.516-2.734-6.25-6.25-6.25h-37.5c-3.516 0-6.25 2.734-6.25 6.25v31.25c0 3.516 2.734 6.25 6.25 6.25h37.5c3.516 0 6.25-2.734 6.25-6.25Zm125 81.25c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

        &lt;/span&gt;Voraussetzung&lt;/p&gt;&lt;p&gt;Damit HTML-Code innerhalb der Markdown-Datei gerendert wird, muss einmalig in der &lt;code&gt;config.toml&lt;/code&gt; folgender Eintrag gemacht werden:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[markup.goldmark.renderer]
unsafe = true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; - Erstellen Sie einen neuen Ordner &lt;code&gt;shortcodes&lt;/code&gt; im Hugo-Verzeichnis &lt;code&gt;layouts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; - Erstellen Sie im neuen Verzeichnis eine neue HTML-Datei. Ich nenne sie wie im Beispiel unter Quellen &lt;code&gt;a_blank.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt; - Fügen Sie diesen Code hinein:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;a target=&amp;#34;_blank&amp;#34; href=&amp;#34;{{ .Get 1 }}&amp;#34;&amp;gt;{{ .Get 0 | markdownify }}&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;(4)&lt;/strong&gt; - In der eigentlichen Markdown-Content-Datei fügen Sie den Shortcode folgendermaßen ein:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{{% a_blank &amp;#34;Shortcodes linking&amp;#34; &amp;#34;https://www.petersell.de&amp;#34; %}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Klickt man jetzt auf diesen Link &lt;a target=&#34;_blank&#34; href=&#34;https://www.petersell.de&#34;&gt;Shortcodes linking&lt;/a&gt;
, öffnet sich die Webseite in einem neuen Tab.&lt;/p&gt;
&lt;h4 id=&#34;weitere-quellen&#34;&gt;Weitere Quellen&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/hugo-0-60-0-raw-html-omitted-issue/22010/7&#34;&gt;Raw HTML omitted Fehler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/shortcode/&#34;&gt;gohugo.io - Create your own shortcodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Hugo CMS mit Asciidoc auf Linux installieren</title>
      <link>http://localhost:1313/blog/hugo-cms-auf-linux-mit-asciidoc/</link>
      <category>asciidoc</category>
      <category>hugo</category>
      <category>linux</category>
      <pubDate>Mon, 25 Nov 2024 19:44:01 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/hugo-cms-auf-linux-mit-asciidoc/</guid>
      <description>&lt;p&gt;Seitdem ich von Windows auf Linux Fedora gewechselt bin, habe ich es versäumt, mir einen lokalen Hugo-Server zu installieren. Nun habe ich das nachgeholt: Mit dem Ergebnis, dass ich mir meine Blogposts vorher lokal anschauen kann, bevor ich sie mit Netlify auf Github veröffentliche.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; Auf der Konsole folgenden Befehl absetzen: &lt;code&gt;$ sudo dnf install hugo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; In das Projektverzeichnis gehen. Bei mir ist es: &lt;code&gt;cd git/github/com.petersell.hugo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt; Das Kommando &lt;code&gt;hugo server&lt;/code&gt; eingeben + ENTER. Danach sollte die Homepage im Browser unter &lt;em&gt;localhost:1313&lt;/em&gt; abrufbar sein. Leider war dies bei mir nicht der Fall. Es erschien diese Fehlermeldung:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Error: error building site: &amp;#34;/git/github/com.petersell.hugo/content/blog/essay-ddrprotagonisten.adoc:1:1&amp;#34;: access denied: &amp;#34;asciidoctor&amp;#34; is not whitelisted in policy &amp;#34;security.exec.allow&amp;#34;; the current security configuration is:

[security]
  enableInlineShortcodes = false

  [security.exec]
    allow = [&amp;#39;^go$&amp;#39;, &amp;#39;^npx$&amp;#39;, &amp;#39;^postcss$&amp;#39;]
    osEnv = [&amp;#39;(?i)^((HTTPS?|NO)_PROXY|PATH(EXT)?|APPDATA|TE?MP|TERM|GO\w+|(XDG_CONFIG_)?HOME|USERPROFILE|SSH_AUTH_SOCK|DISPLAY|LANG)$&amp;#39;]

  [security.funcs]
    getenv = [&amp;#39;^HUGO_&amp;#39;, &amp;#39;^CI$&amp;#39;]

  [security.http]
    methods = [&amp;#39;(?i)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hier fand ich eine Fehlerbehebung: &lt;a href=&#34;https://gohugo.io/about/security/&#34;&gt;https://gohugo.io/about/security/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In &lt;a href=&#34;https://github.com/gohugoio/hugo/releases/tag/v0.91.0&#34;&gt;Hugo v0.91.0&lt;/a&gt; and newer, you can specify a project’s security policy in a config file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;(4)&lt;/strong&gt; Ich hatte neben Markdown-Dateien auch asciidoc-Dateien in meinem Hugo-Projekt eingebunden. In der Datei &lt;em&gt;config.toml&lt;/em&gt; in meinem Homepage-Hauptverzeichnis musste ich folgendes hinzufügen: &amp;lsquo;^asciidoctor$&amp;rsquo;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[security]
  [security.exec]
    allow = [&amp;#39;^go$&amp;#39;, &amp;#39;^npx$&amp;#39;, &amp;#39;^postcss$&amp;#39;, &amp;#39;^asciidoctor$&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Jetzt wurde die Homepage gebuildet und war im Browser via &lt;em&gt;localhost:1313&lt;/em&gt; aufrufbar.&lt;/p&gt;
&lt;p&gt;Quelle: &lt;a href=&#34;https://developer.fedoraproject.org/start/sw/web-app/hugo.html&#34;&gt;https://developer.fedoraproject.org/start/sw/web-app/hugo.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo mit Asciidoc - Webseite mit Netlify bereitstellen</title>
      <link>http://localhost:1313/blog/hugo-asciidoc-netlify/</link>
      <category>asciidoc</category>
      <category>hugo</category>
      <category>blogging</category>
      <pubDate>Fri, 01 May 2020 17:29:38 +0200</pubDate>
      
      <guid>http://localhost:1313/blog/hugo-asciidoc-netlify/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Solange man als Blogger nur wenige Artikel hat, kann man den Hugo-Ordner &lt;code&gt;public&lt;/code&gt; via FTP auf den Webserver kopieren. Werden es mehr Blogposts, werden Dienste wie Netlify unausweichlich.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_quelle&#34;&gt;Quelle&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.patrickpeeters.com/2019/09/asciidoc-support-for-hugo-on-netlify/&#34; class=&#34;ext-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AsciiDoc support for Hugo on Netlify&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_abenteuer_netlify&#34;&gt;Abenteuer Netlify&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Als das Kopieren meines Output-Ordners auf meinen Webserver 5 Minuten dauerte, war klar, dass das kein Bloggen mehr ist, sondern eine Qual. Ich wußte nie, was &lt;em&gt;Deployen&lt;/em&gt; bedeutet, jetzt ahnte ich es. Im Netz war meistens vom Dienst &lt;em&gt;Netlify&lt;/em&gt; die Rede, wenn es um das Bereitstellen von Hugo-Output auf einen Webserver ging. Bestimmt gibt es auch andere Dienste. Aber als ich obige Quelle fand, stand meine Wahl für &lt;em&gt;Netlify&lt;/em&gt; fest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Die erste Begegnung mit dem Dienst war schaurig. Man braucht ein hohes Verzweiflungspotential, um in der Benutzerführung von Netlify nicht sofort zu verzweifeln. So wird der Nutzer 3 Schritte mittels einer großen &lt;em&gt;Weiter&lt;/em&gt;-Schaltfläche geleitet, um dann im 4. Schritt lediglich auf einen kleinen Repository-Namen klicken zu müssen, damit es weiter geht. Hat man diese Klippe überwunden, erwarten einen jede Menge Fehlermeldungen, die es erstmal zu finden und zu dechiffrieren gilt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ein Abbruch gab es wegen einer PDF-Datei, ein zweiter wegen einer falschen Syntax meiner Hugo-Version. Auf folgende Fehlermeldung war ich gottseidank vorbereitet und entsprechend erleichert, als sie mir erschien.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;10:08:14 PM: Executing user command: hugo --gc --minify
10:08:14 PM: Building sites …
10:08:14 PM: ERROR 2020/04/29 20:08:14 asciidoctor / asciidoc not found in $PATH: Please install.
10:08:14 PM: Leaving AsciiDoc content unrendered.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_anpassungen_wegen_asciidoc&#34;&gt;Anpassungen wegen Asciidoc&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Nun schreibt Patrick Peeters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Netlify’s buildbot can install software on build, all you need is a Gemfile in the root folder of your project pointing at the right software packages, in my case that’s just asciidoctor.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Patrick Peeters
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Was zur Hölle ist ein &lt;em&gt;Gemfile&lt;/em&gt;? Wieder halfen mir öffentliche Git-Repositorys: eine Datei mit Namen &lt;code&gt;Gemfile&lt;/code&gt;. Erstellen Sie also im Rootverzeichnis Ihres Hugo-Projektes eine Datei, benennen Sie sie &lt;em&gt;Gemfile&lt;/em&gt; und tragen folgenden Text ein:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;source &amp;#39;https://rubygems.org&amp;#39;
gem &amp;#39;asciidoctor&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In einer Anleitung zu Netlify hatte ich gelernt, dass es ratsam ist, ebenfalls im Rootverzeichnis eine Datei namens &lt;code&gt;netlify.toml&lt;/code&gt; anzulegen. So Sie auch eine haben, müssen Sie den Build-Befehl folgendermaßen anpassen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;[build]
publish = &amp;#34;public&amp;#34;
command = &amp;#34;bundle &amp;amp;&amp;amp; hugo --minify&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Wenn Sie jetzt Ihr Hugo-Projekt mit den angepassten Dateien &lt;code&gt;Gemfile&lt;/code&gt; und &lt;code&gt;netlify.toml&lt;/code&gt; in den Masterbranch hochladen, sollte der &lt;em&gt;Deploy&lt;/em&gt; fehlerfrei laufen und zumindest der Asciidoc-Inhalt korrekt ausgegeben werden.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_theme_im_ursprungszustand&#34;&gt;Theme im Ursprungszustand&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Als Hugo-Theme habe ich mich für das Theme &lt;a href=&#34;https://github.com/foo-dogsquared/hugo-theme-contentful&#34; class=&#34;ext-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Contentful&lt;/a&gt; entschieden. Da dies ein sehr minimalistisches Theme ist, musste ich viel nacharbeiten. Um so größer war der Schreck, als nach erfolgreichem &lt;em&gt;Deploy&lt;/em&gt; meine Webseite so gut wie nackt war: nämlich im Urzustand des Original-Themes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Jetzt war ich zugegebenermaßen etwas müde. Da ich wußte, dass ich nicht so schnell auf ein anderes Theme umschwenken werde, habe ich kurzerhand die Theme-Dateien in die Hugo-Standard-Ordner verschoben und das Verzeichnis &lt;code&gt;themes&lt;/code&gt; komplett gelöscht. Nach einem nächsten Upload in den Masterbranch war alles so schön grün wie nach einem lokalen &lt;code&gt;hugo server&lt;/code&gt;-Aufruf.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Hugo mit Asciidoc - Auf anderen Post verlinken</title>
      <link>http://localhost:1313/blog/hugo-auf-post-verlinken/</link>
      <category>hugo</category>
      <category>asciidoc</category>
      <pubDate>Tue, 28 Apr 2020 14:43:14 +0200</pubDate>
      
      <guid>http://localhost:1313/blog/hugo-auf-post-verlinken/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Wenn ich im CMS Hugo statt Markdown Asciidoc nutze, wie kann ich dann auf einen anderen Beitrag verlinken?.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Beide adoc-Dateien liegen im selben Verzeichnis:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;|-- content
    |-- blog
        |-- teamwork-manifest.adoc
        └-- teamwork-manifest-warum.adoc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In der Datei &lt;code&gt;teamwork-manifest-warum.adoc&lt;/code&gt; musste ich auf den Post &lt;code&gt;teamwork-manifest.adoc&lt;/code&gt; verlinken. Folgende Notation für einen Inline-Link brachte Erfolg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-asciidoc&#34; data-lang=&#34;asciidoc&#34;&gt;Fünf Kollegen haben link:../teamwork-manifest/[ein Manifest] geschrieben.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Hugo mit Stock and Flow</title>
      <link>http://localhost:1313/blog/hugo-stock-and-flow/</link>
      <category>hugo</category>
      <category>blogging</category>
      <pubDate>Fri, 17 Apr 2020 16:40:39 +0200</pubDate>
      
      <guid>http://localhost:1313/blog/hugo-stock-and-flow/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Wie unterscheide ich im CMS Hugo Stock and Flow? Jeder, der sich mit Blogging beschäftigt, stößt eines Tages auf Robin Sloan und seinem Gleichnis vom &lt;a href=&#34;http://snarkmarket.com/2010/4890&#34; class=&#34;ext-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stock and Flow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Flow&lt;/strong&gt; is the feed. It’s the posts and the tweets. It’s the stream of daily and sub-daily updates that reminds people you exist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Stock&lt;/strong&gt; is the durable stuff. It’s the content you produce that’s as interesting in two months (or two years) as it is today. It’s what people discover via search. It’s what spreads slowly but surely, building fans over time.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Robin Sloan&lt;br/&gt;
&lt;cite&gt;http://snarkmarket.com/2010/4890&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In meinem alten &lt;a href=&#34;https://withknown.com/&#34; class=&#34;ext-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMS Known&lt;/a&gt; gab es nur einen Stream: längere eigene Texte und kurze Statusmeldungen wurden in einer &lt;em&gt;Timeline&lt;/em&gt; angezeigt. Doch sind eigene Essays und abgeschriebene Zitate von anderen Autoren wirklich von einem gleichen Gewicht? Nein. Also habe ich im CMS Hugo eine Trennung des Stock und Flows vorgenommen: &lt;em&gt;Blog&lt;/em&gt; ist der &lt;em&gt;Stock&lt;/em&gt; und &lt;em&gt;Status&lt;/em&gt; der &lt;em&gt;Flow&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In Hugo habe ich einfach sämtliche Blog-Layouts dupliziert und den Namen &lt;em&gt;Status&lt;/em&gt; angepinnt. Jedoch wurden auf der Startseite der Homepage immer nur die Blogbeiträge ausgegeben - die Statusbeiträge fehlten. Jetzt wurde ich in der &lt;a href=&#34;https://gohugo.io/functions/where/#mainsections&#34; class=&#34;ext-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo-Dokumentation&lt;/a&gt; fündig. Es gilt, in der Konfigurationsdatei &lt;code&gt;config.toml&lt;/code&gt; einen kleinen Eintrag vorzunehmen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;[params]
  mainSections = [&amp;#34;blog&amp;#34;, &amp;#34;status&amp;#34;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Hugo mit Asciidoc - Bilder einbinden</title>
      <link>http://localhost:1313/blog/hugo-asciidoc-bilder-einbinden/</link>
      <category>hugo</category>
      <category>asciidoc</category>
      <pubDate>Sun, 22 Mar 2020 20:08:10 +0100</pubDate>
      
      <guid>http://localhost:1313/blog/hugo-asciidoc-bilder-einbinden/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Leider ist eine Selbstverständlichkeit wie das Einbinden von Bildern in der Kombination Hugo/Asciidoc etwas speziell. Das Markup ist Asciidoc, welches mit Asciidoctor in HTML umgewandelt wird. Nun hat aber das Hugo-CMS seinen eigenen Mechanismus, der mit Markdown auch wunderbar funktioniert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gottseidank fand ich auf Github den Quelltext des Blogs &lt;a href=&#34;https://foo-dogsquared.github.io&#34; class=&#34;bare&#34;&gt;https://foo-dogsquared.github.io&lt;/a&gt; mit einem einfachen Beispiel der Bildeinbindung.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Tipp&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Voraussetzung&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sie haben Hugo und Asciidoctor installiert.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_quellen&#34;&gt;Quellen&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://foo-dogsquared.github.io/blog/posts/blogging-with-asciidoctor-and-hugo/&#34;&gt;Blogging with Asciidoctor and Hugo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/foo-dogsquared/blog/master/content/posts/blogging-with-asciidoctor-and-hugo.adoc&#34;&gt;Beispiel der Bildeinbindung&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_anleitung&#34;&gt;Anleitung&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_1_content_datei_editieren&#34;&gt;1. Content-Datei editieren&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Schreiben Sie Ihren Blogpost in der Datei &lt;code&gt;meinblogpost.adoc&lt;/code&gt; und fügen das Bild im Text ein.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;image::meinblogpost.gif[]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ebenfalls in die Content-Datei kommt folgendes Asciidoc-Attribut.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;:imagesdir: ../images/meinblogpostimage/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Damit beim Neuanlegen einer adoc-Datei der Bildordner gleich korrekt ausgegeben wird, schreiben Sie in Ihrem Archetype &lt;code&gt;default.adoc&lt;/code&gt; folgende Notation in den Bereich der Asciidoc-Attribute (unterhalb des YAML-Headers):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;:imagesdir: ../images/{{ .File.BaseFileName }}/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_2_bild_abspeichern&#34;&gt;2. Bild abspeichern&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Legen Sie einen Ordner &lt;code&gt;images&lt;/code&gt; innerhalb des post-Ordners an.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;|-- content
    |-- post
        └-- images&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Da Sie wissen, dass Ihre Bilddatei &lt;code&gt;meinblogpost.gif&lt;/code&gt; heißt, legen Sie einen weiteren Ordner &lt;code&gt;meinblogpost&lt;/code&gt; innerhalb des &lt;code&gt;images&lt;/code&gt;-Ordners an. In diesen kopieren Sie die Bilddatei zum Blogpost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;|-- content
    |-- post
        |-- images
        |   └-- meinblogpost.gif
        └-- meinblogpost.adoc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_admonitions&#34;&gt;Admonitions&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ich habe auf die kleinen Vignetten bzw. Icons für die Warnhinweise und Tipps verzichtet. Diese werden im Asciidoctor immer dann ausgegeben, wenn Sie in Asciidoc-Attributen folgenden Wert vermerken:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;:icons: font&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ich habe also den CSS-Link für &lt;em&gt;Font Awesome&lt;/em&gt; wieder entfernt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Interne Einbindung&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;{{&amp;#34;css/fa/css/all.css&amp;#34; | absURL }}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Externe Einbindung&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&amp;lt;link href=&amp;#34;https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In meiner CSS wurden sämtliche Einträge zur class &lt;code&gt;.admonitionblock&lt;/code&gt; überflüssig, die ich mir zuvor aus der &lt;code&gt;asciidoctor.css&lt;/code&gt; kopiert hatte.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>