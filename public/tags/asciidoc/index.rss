<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asciidoc on Andreas Petersell</title>
    <link>https://www.petersell.com/tags/asciidoc/</link>
    <description>Recent content in asciidoc on Andreas Petersell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <copyright>Die Blogbeiträge stehen unter einer [Creative Commons Namensnennung 4.0 International Lizenz](https://creativecommons.org/licenses/by/4.0/).</copyright>
    <lastBuildDate>Wed, 10 Jun 2020 10:57:42 +0200</lastBuildDate>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    
        <atom:link href="https://www.petersell.com/tags/asciidoc/index.rss" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Antora-Output aus lokalen Quellen generieren</title>
      <link>https://www.petersell.com/blog/asciidoc-antora-test/</link>
      <category>asciidoc</category>
      <pubDate>Wed, 10 Jun 2020 10:57:42 +0200</pubDate>
      
      <guid>https://www.petersell.com/blog/asciidoc-antora-test/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Antora ist ein &lt;em&gt;Static Site Generator&lt;/em&gt; für Technische Redakteure. Der Content wird in Asciidoc geschrieben und kann sich in verschiedenen Git-Repositorys befinden. Zum Testen sollen sich die Quelldateien jedoch lokal auf dem Rechner befinden.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt;
&lt;div id=&#34;toctitle&#34; class=&#34;title&#34;&gt;&lt;/div&gt;
&lt;ul class=&#34;sectlevel1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;#_quellen&#34;&gt;Quellen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_kontext&#34;&gt;Kontext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_1_verzeichnisstruktur_einrichten&#34;&gt;1) Verzeichnisstruktur einrichten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2_playbook_datei_erstellen&#34;&gt;2) Playbook-Datei erstellen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3_antora_output_generieren&#34;&gt;3) Antora-Output generieren&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_quellen&#34;&gt;Quellen&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.com/antora/antora/-/issues/284#note_95389433&#34; class=&#34;ext-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Is there a way to use Antora without Git?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_kontext&#34;&gt;Kontext&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Antora ist in erster Linie dazu gedacht, Dokumentationen aus mehreren Repositorys unter einer Oberfläche zusammenzuführen (docs as code). Bevor ein Redakteur jedoch via Merge Request in eine übergreifende Gesamtdokumentation eincheckt, möchte er sichergehen und seine Texte testen. Antora sollte dazu auch lokal lauffähig sein.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_1_verzeichnisstruktur_einrichten&#34;&gt;1) Verzeichnisstruktur einrichten&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Es gibt drei Quell-Bestandteile einer Antora-Dokumentation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Die Playbook-Datei (z.B. &lt;code&gt;antora-test-playbook.yml&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Die Components (Die Inhalte-Repositorys bzw. Inhalte-Verzeichnisse)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Das UI-Theme (&lt;code&gt;ui-bundle.zip&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Diese 3 Bestandteile werden lokal in ein Verzeichnis kopiert. Ich möchte es das &lt;em&gt;Antora-Arbeitsverzeichnis&lt;/em&gt; nennen. Im Beispiel existieren im &lt;em&gt;Antora-Arbeitsverzeichnis&lt;/em&gt; zwei Components sowie die Playbook-Datei und das UI-Theme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;com.petersell.example
    ├── com.petersell.example.api
    ├── com.petersell.example.impl
    └── com.petersell.example.doc
        ├── modules
        └── antora.yml
 com.petersell.anotherexample
    └── com.petersell.anotherexample.doc
        ├── modules
        └── antora.yml
antora-test-playbook.yml
ui-bundle.zip&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_2_playbook_datei_erstellen&#34;&gt;2) Playbook-Datei erstellen&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Da ich neben den o.g. zwei lokalen Components-Verzeichnisse noch ein Beispielprojekt von Antora integrieren möchte, dass sich in einem Git-Repository befindet, musste ich meine Playbook-Datei &lt;code&gt;antora-test-playbook.yml&lt;/code&gt; folgendermaßen gestalten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;site:
  title: Antora Test Site &lt;b class=&#34;conum&#34;&gt;(1)&lt;/b&gt;
  url: http://localhost
  start_page: Startseite::index.adoc &lt;b class=&#34;conum&#34;&gt;(2)&lt;/b&gt;
content:
  sources:
  - url: . &lt;b class=&#34;conum&#34;&gt;(3)&lt;/b&gt;
    branches: HEAD &lt;b class=&#34;conum&#34;&gt;(4)&lt;/b&gt;
    start_path: com.petersell.example/com.petersell.example.doc &lt;b class=&#34;conum&#34;&gt;(5)&lt;/b&gt;
  - url: https://gitlab.com/antora/demo/demo-component-b.git &lt;b class=&#34;conum&#34;&gt;(6)&lt;/b&gt;
    branches: [v2.0, v1.0]
    start_path: docs
  - url: . &lt;b class=&#34;conum&#34;&gt;(7)&lt;/b&gt;
    branches: HEAD
    start_path: com.petersell.anotherexample/com.petersell.anotherexample.doc
ui:
  bundle:
  #
    url: ./ui-bundle.zip &lt;b class=&#34;conum&#34;&gt;(8)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Der Titel erscheint im Output links oben in der Kopf-Navigationsleiste.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Der linke Teil (vor den zweifachen Doppelpunkten) gibt den Namen der Startseite wider. Sie finden diesen in der &lt;code&gt;antora.yml&lt;/code&gt; des jeweiligen Ordners hinter dem Attribut &lt;code&gt;name&lt;/code&gt;. Der rechte Teil gibt den Pfad inklusive Dateiname der Startseiten-Datei aus. Hier ist die Startseite im ROOT-Verzeichnis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ist die Component lokal auf Ihrem Rechner, setzen Sie den Punkt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ist die Component lokal auf Ihrem Rechner, schreiben Sie &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Der Pfad zum jeweiligen Component-Verzeichnis inklusive dem Verzeichnisnamen, hier &lt;code&gt;com.petersell.example.doc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Die Syntax für eine Component in einem Git-Repository. Hier ist es eine Beispieldokumentation von Antora.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Die zweite lokale Component. Gehen Sie analog der ersten Component vor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Das lokale UI-Theme. Dies könnte auch die URL zu einem Git-Repository inklusive der ZIP-Datei sein.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_3_antora_output_generieren&#34;&gt;3) Antora-Output generieren&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Eröffnen Sie im &lt;em&gt;Antora-Arbeitsverzeichnis&lt;/em&gt; eine PowerShell und setzen Sie folgenden Build-Befehl ab.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Antora-Buildbefehl&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;antora antora-test-playbook.yml --stacktrace&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Höchstwahrscheinlich werden Sie eine Fehlermeldung erhalten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Fehlermeldung&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;Error: Local content source must be a git repository: C:\Users\Andreas\Dropbox\antora (resolved from url: .)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In diesem Fall öffnen Sie im &lt;em&gt;Antora-Arbeitsverzeichnis&lt;/em&gt; ein &lt;a href=&#34;https://gitforwindows.org/&#34; class=&#34;ext-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git-Bash-Fenster&lt;/a&gt; und geben die folgende Befehle auf einmal ein.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../images/asciidoc-antora-test/gitvortaeuschen.png&#34; alt=&#34;Git-Bash-Fenster im Arbeitsverzeichnis&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Git-Befehle kopieren&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;git init .
touch .gitignore
git add .gitignore
git commit -m &#39;initialize repository&#39;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Eröffnen Sie im &lt;em&gt;Antora-Arbeitsverzeichnis&lt;/em&gt; eine PowerShell und setzen nochmals den Build-Befehl ab.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Ausführen in der PowerShell&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;antora antora-test-playbook.yml --stacktrace&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Der Befehl clont das externe Repository des Antora-Beispielprojekts. Im Ergebnis entsteht innerhalb des &lt;em&gt;Antora-Arbeitsverzeichnisses&lt;/em&gt; ein neuer Ordner &lt;code&gt;build&lt;/code&gt; mit dem HTML-Output der drei Components.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Antora lokal installieren</title>
      <link>https://www.petersell.com/blog/asciidoc-antora-install/</link>
      <category>asciidoc</category>
      <pubDate>Wed, 03 Jun 2020 12:15:42 +0200</pubDate>
      
      <guid>https://www.petersell.com/blog/asciidoc-antora-install/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Antora ist so etwas wie ein &lt;em&gt;Static Site Generator&lt;/em&gt; für Technische Redakteure. Der Content wird in Asciidoc geschrieben und kann sich in verschiedenen Git-Repositorys befinden.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt;
&lt;div id=&#34;toctitle&#34; class=&#34;title&#34;&gt;&lt;/div&gt;
&lt;ul class=&#34;sectlevel1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;#_quellen&#34;&gt;Quellen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_kontext&#34;&gt;Kontext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_1_update_node_js_für_windows_mit_installer&#34;&gt;1) Update Node.js für Windows mit Installer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_2_antora_installieren&#34;&gt;2) Antora installieren&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_3_antora_demo_projekt_generieren&#34;&gt;3) Antora-Demo-Projekt generieren&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_quellen&#34;&gt;Quellen&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.antora.org/antora/2.2/install/windows-requirements/&#34; class=&#34;ext-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Antora-Dokumentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_kontext&#34;&gt;Kontext&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Dieser Artikel ist eine Dokumentation der Installation von Antora auf meinem Privatrechner. Das kann auf jedem anderen PC anders aussehen. Warum &lt;em&gt;Privatrechner?&lt;/em&gt; Dieses Wort steht für die Kombination aus den begrenzten PC-Kenntnissen eine Redakteurs - aber gepaart mit vollen Adminrechten.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_1_update_node_js_für_windows_mit_installer&#34;&gt;1) Update Node.js für Windows mit Installer&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Auf &lt;a href=&#34;https://nodejs.org/en/download/&#34; class=&#34;bare&#34;&gt;https://nodejs.org/en/download/&lt;/a&gt; gilt es, den passenden Long Term Support-Installer zu downloaden. In meinem Fall &lt;em&gt;LTS Windows Installer (.msi) 64-bit&lt;/em&gt;. Führen Sie die Datei per Doppelklick aus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Nach dem Installer habe ich noch das nachfolgende Skript &lt;em&gt;Tools for Node.js Native Module Installation Script&lt;/em&gt; gestartet. Dies dauerte einige Minuten und installierte via Chocolatey jede Menge Komponenten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../images/asciidoc-antora-install/install-node4.png&#34; alt=&#34;Chocolatey-Installation&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;Figure 1. Chocolatey-Installation&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Das Ergebnis in der PowerShell ergab diese Versionen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;C:\Users\Andreas&amp;gt; npm --version
6.14.4
C:\Users\Andreas&amp;gt; node --version
v12.16.3&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_2_antora_installieren&#34;&gt;2) Antora installieren&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Wie in der Antora-Dokumenation beschrieben, geben Sie den Installationsbefehl für eine globale Installation von Antora ein.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Ausführen in der PowerShell&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;$ npm i -g @antora/cli@2.2 @antora/site-generator-default@2.2&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Anschließend führen Sie &lt;code&gt;antora version&lt;/code&gt; aus, um sich vom Erfolg der Installation zu überzeugen. Bei mir endete es in einer Fehlermeldung.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Fehlermeldung&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;Die Datei &#34;C:\Users\Andreas\AppData\Roaming\npm\antora.ps1&#34; kann nicht geladen werden. Die Datei
&#34;C:\Users\Andreas\AppData\Roaming\npm\antora.ps1&#34; ist nicht digital signiert. Sie können dieses Skript im aktuellen System nicht ausführen. Weitere Informationen zum Ausführen von Skripts und Festlegen der Ausführungsrichtlinie erhalten Sie unter &#34;about_Execution_Policies&#34; (https:/go.microsoft.com/fwlink/?LinkID=135170)..&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Auf der angegebenen URL von Microsoft https:/go.microsoft.com/fwlink/?LinkID=135170 wurde ich fündig.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../images/asciidoc-antora-install/antora-version.png&#34; alt=&#34;Ausführungsrichtlinie ändern&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;Figure 2. Ausführungsrichtlinie ändern&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Es gilt herauszufinden, welche Ausführungsrichtlinien innerhalb der PowerShell für mich als Nutzer gelten:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Ausführen in der PowerShell&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;Get-ExecutionPolicy -Scope CurrentUser&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Für mich auf dem Windows-Client galt &lt;em&gt;Undefined&lt;/em&gt;. Um meine Rechte auf der PowerShell meines Rechners zu erweitern, musste ich eingeben:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Ausführen in der PowerShell&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ein nochmaliges Ausführen von &lt;code&gt;antora version&lt;/code&gt; gab die korrekte Versionsnummer &lt;code&gt;2.2.0&lt;/code&gt; zurück.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_3_antora_demo_projekt_generieren&#34;&gt;3) Antora-Demo-Projekt generieren&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Um zu einem schnellen Ergebnis zu kommen, habe ich das Beispielprojekt &lt;em&gt;Demo Docs Site&lt;/em&gt; auf &lt;a href=&#34;https://gitlab.com/antora/demo/docs-site&#34; class=&#34;bare&#34;&gt;https://gitlab.com/antora/demo/docs-site&lt;/a&gt; generiert. Um es clonen zu können, habe ich mir einen Gitlab-Account angelegt. Für diesen Account musste ich mir ein &lt;a href=&#34;https://www.hrz.tu-darmstadt.de/speicherplatz_datensicherung_und_server/virtuelle_server/anleitung_sammlung/artikel_details_22784.de.jsp&#34; class=&#34;ext-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSH-Key einrichten&lt;/a&gt; und in den Nutzer-Einstellungen unter &lt;em&gt;SSH-Keys&lt;/em&gt; hinterlegen. Nun konnte ich das Beispielprojekt &lt;em&gt;Demo Docs Site&lt;/em&gt; fehlerfrei clonen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../images/asciidoc-antora-install/clone-beispielrepo2.png&#34; alt=&#34;Beispielrepo clonen&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;Figure 3. Beispielprojekt clonen&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Öffnen Sie ein PowerShell-Fenster im neu entstandenen Ordner &lt;code&gt;docs-site&lt;/code&gt; und geben Sie den Build-Befehl ein.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Ausführen in der PowerShell&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;C:\Daten\antora\docs-site&amp;gt; antora antora-playbook.yml&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Der Befehl clont zwei Repositorys. Im Ergebnis entsteht innerhalb des Ordners &lt;code&gt;docs-site&lt;/code&gt; ein neuer Ordner &lt;code&gt;build&lt;/code&gt; mit dem HTML-Output des Beispielprojekts .&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Hugo mit Asciidoc - Webseite mit Netlify bereitstellen</title>
      <link>https://www.petersell.com/blog/hugo-asciidoc-netlify/</link>
      <category>hugo</category>
      <category>asciidoc</category>
      <pubDate>Fri, 01 May 2020 17:29:38 +0200</pubDate>
      
      <guid>https://www.petersell.com/blog/hugo-asciidoc-netlify/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Solange man als Blogger nur wenige Artikel hat, kann man den Hugo-Ordner &lt;code&gt;public&lt;/code&gt; via FTP auf den Webserver kopieren. Werden es mehr Blogposts, werden Dienste wie Netlify unausweichlich.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_quelle&#34;&gt;Quelle&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.patrickpeeters.com/2019/09/asciidoc-support-for-hugo-on-netlify/&#34; class=&#34;ext-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AsciiDoc support for Hugo on Netlify&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_abenteuer_netlify&#34;&gt;Abenteuer Netlify&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Als das Kopieren meines Output-Ordners auf meinen Webserver 5 Minuten dauerte, war klar, dass das kein Bloggen mehr ist, sondern eine Qual. Ich wußte nie, was &lt;em&gt;Deployen&lt;/em&gt; bedeutet, jetzt ahnte ich es. Im Netz war meistens vom Dienst &lt;em&gt;Netlify&lt;/em&gt; die Rede, wenn es um das Bereitstellen von Hugo-Output auf einen Webserver ging. Bestimmt gibt es auch andere Dienste. Aber als ich obige Quelle fand, stand meine Wahl für &lt;em&gt;Netlify&lt;/em&gt; fest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Die erste Begegnung mit dem Dienst war schaurig. Man braucht ein hohes Verzweiflungspotential, um in der Benutzerführung von Netlify nicht sofort zu verzweifeln. So wird der Nutzer 3 Schritte mittels einer großen &lt;em&gt;Weiter&lt;/em&gt;-Schaltfläche geleitet, um dann im 4. Schritt lediglich auf einen kleinen Repository-Namen klicken zu müssen, damit es weiter geht. Hat man diese Klippe überwunden, erwarten einen jede Menge Fehlermeldungen, die es erstmal zu finden und zu dechiffrieren gilt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ein Abbruch gab es wegen einer PDF-Datei, ein zweiter wegen einer falschen Syntax meiner Hugo-Version. Auf folgende Fehlermeldung war ich gottseidank vorbereitet und entsprechend erleichert, als sie mir erschien.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;10:08:14 PM: Executing user command: hugo --gc --minify
10:08:14 PM: Building sites …
10:08:14 PM: ERROR 2020/04/29 20:08:14 asciidoctor / asciidoc not found in $PATH: Please install.
10:08:14 PM: Leaving AsciiDoc content unrendered.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_anpassungen_wegen_asciidoc&#34;&gt;Anpassungen wegen Asciidoc&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Nun schreibt Patrick Peeters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Netlify’s buildbot can install software on build, all you need is a Gemfile in the root folder of your project pointing at the right software packages, in my case that’s just asciidoctor.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
&amp;#8212; Patrick Peeters
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Was zur Hölle ist ein &lt;em&gt;Gemfile&lt;/em&gt;? Wieder halfen mir öffentliche Git-Repositorys: eine Datei mit Namen &lt;code&gt;Gemfile&lt;/code&gt;. Erstellen Sie also im Rootverzeichnis Ihres Hugo-Projektes eine Datei, benennen Sie sie &lt;em&gt;Gemfile&lt;/em&gt; und tragen folgenden Text ein:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;source &#39;https://rubygems.org&#39;
gem &#39;asciidoctor&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In einer Anleitung zu Netlify hatte ich gelernt, dass es ratsam ist, ebenfalls im Rootverzeichnis eine Datei namens &lt;code&gt;netlify.toml&lt;/code&gt; anzulegen. So Sie auch eine haben, müssen Sie den Build-Befehl folgendermaßen anpassen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;[build]
publish = &#34;public&#34;
command = &#34;bundle &amp;amp;&amp;amp; hugo --minify&#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Wenn Sie jetzt Ihr Hugo-Projekt mit den angepassten Dateien &lt;code&gt;Gemfile&lt;/code&gt; und &lt;code&gt;netlify.toml&lt;/code&gt; in den Masterbranch hochladen, sollte der &lt;em&gt;Deploy&lt;/em&gt; fehlerfrei laufen und zumindest der Asciidoc-Inhalt korrekt ausgegeben werden.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_theme_im_ursprungszustand&#34;&gt;Theme im Ursprungszustand&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Als Hugo-Theme habe ich mich für das Theme &lt;a href=&#34;https://github.com/foo-dogsquared/hugo-theme-contentful&#34; class=&#34;ext-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Contentful&lt;/a&gt; entschieden. Da dies ein sehr minimalistisches Theme ist, musste ich viel nacharbeiten. Um so größer war der Schreck, als nach erfolgreichem &lt;em&gt;Deploy&lt;/em&gt; meine Webseite so gut wie nackt war: nämlich im Urzustand des Original-Themes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Jetzt war ich zugegebenermaßen etwas müde. Da ich wußte, dass ich nicht so schnell auf ein anderes Theme umschwenken werde, habe ich kurzerhand die Theme-Dateien in die Hugo-Standard-Ordner verschoben und das Verzeichnis &lt;code&gt;themes&lt;/code&gt; komplett gelöscht. Nach einem nächsten Upload in den Masterbranch war alles so schön grün wie nach einem lokalen &lt;code&gt;hugo server&lt;/code&gt;-Aufruf.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Hugo mit Asciidoc - Bilder einbinden</title>
      <link>https://www.petersell.com/blog/hugo-asciidoc-bilder-einbinden/</link>
      <category>hugo</category>
      <category>asciidoc</category>
      <pubDate>Sun, 22 Mar 2020 20:08:10 +0100</pubDate>
      
      <guid>https://www.petersell.com/blog/hugo-asciidoc-bilder-einbinden/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Leider ist eine Selbstverständlichkeit wie das Einbinden von Bildern in der Kombination Hugo/Asciidoc etwas speziell. Das Markup ist Asciidoc, welches mit Asciidoctor in HTML umgewandelt wird. Nun hat aber das Hugo-CMS seinen eigenen Mechanismus, der mit Markdown auch wunderbar funktioniert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Gottseidank fand ich auf Github den Quelltext des Blogs &lt;a href=&#34;https://foo-dogsquared.github.io&#34; class=&#34;bare&#34;&gt;https://foo-dogsquared.github.io&lt;/a&gt; mit einem einfachen Beispiel der Bildeinbindung.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Tipp&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Voraussetzung&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sie haben Hugo und Asciidoctor installiert.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_quellen&#34;&gt;Quellen&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://foo-dogsquared.github.io/blog/posts/blogging-with-asciidoctor-and-hugo/&#34;&gt;Blogging with Asciidoctor and Hugo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/foo-dogsquared/blog/master/content/posts/blogging-with-asciidoctor-and-hugo.adoc&#34;&gt;Beispiel der Bildeinbindung&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_anleitung&#34;&gt;Anleitung&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_1_content_datei_editieren&#34;&gt;1. Content-Datei editieren&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Schreiben Sie Ihren Blogpost in der Datei &lt;code&gt;meinblogpost.adoc&lt;/code&gt; und fügen das Bild im Text ein.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;image::meinblogpost.gif[]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ebenfalls in die Content-Datei kommt folgendes Asciidoc-Attribut.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;:imagesdir: ../images/meinblogpostimage/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Damit beim Neuanlegen einer adoc-Datei der Bildordner gleich korrekt ausgegeben wird, schreiben Sie in Ihrem Archetype &lt;code&gt;default.adoc&lt;/code&gt; folgende Notation in den Bereich der Asciidoc-Attribute (unterhalb des YAML-Headers):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;:imagesdir: ../images/{{ .File.BaseFileName }}/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_2_bild_abspeichern&#34;&gt;2. Bild abspeichern&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Legen Sie einen Ordner &lt;code&gt;images&lt;/code&gt; innerhalb des post-Ordners an.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;|-- content
    |-- post
        └-- images&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Da Sie wissen, dass Ihre Bilddatei &lt;code&gt;meinblogpost.gif&lt;/code&gt; heißt, legen Sie einen weiteren Ordner &lt;code&gt;meinblogpost&lt;/code&gt; innerhalb des &lt;code&gt;images&lt;/code&gt;-Ordners an. In diesen kopieren Sie die Bilddatei zum Blogpost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;|-- content
    |-- post
        |-- images
        |   └-- meinblogpost.gif
        └-- meinblogpost.adoc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_admonitions&#34;&gt;Admonitions&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ich habe auf die kleinen Vignetten bzw. Icons für die Warnhinweise und Tipps verzichtet. Diese werden im Asciidoctor immer dann ausgegeben, wenn Sie in Asciidoc-Attributen folgenden Wert vermerken:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;:icons: font&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ich habe also den CSS-Link für &lt;em&gt;Font Awesome&lt;/em&gt; wieder entfernt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Interne Einbindung&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;{{&#34;css/fa/css/all.css&#34; | absURL }}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Externe Einbindung&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&amp;lt;link href=&#34;https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&#34; rel=&#34;stylesheet&#34;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In meiner CSS wurden sämtliche Einträge zur class &lt;code&gt;.admonitionblock&lt;/code&gt; überflüssig, die ich mir zuvor aus der &lt;code&gt;asciidoctor.css&lt;/code&gt; kopiert hatte.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Asciidoctor auf Windows einrichten</title>
      <link>https://www.petersell.com/blog/asciidoc-asciidoctor-install/</link>
      <category>asciidoc</category>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.petersell.com/blog/asciidoc-asciidoctor-install/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;AsciiDoc ist eine vereinfachte Auszeichnungssprache ähnlich Markdown, die dazu dient, Texte in verschiedenen Dokumentenformaten zu veröffentlichen. Asciidoc wurde speziell für die Technische Dokumentation entwickelt und wird in vielen Git-Portalen als Dokumentationsstandard genutzt. Es hat jedoch nicht die Möglichkeiten der Wiederverwendung wie DITA-XML. Neuer Rechner, neuer Doktor: wie muss ich ihn installieren? Jetzt schreibe ich es auf, denn ich vergesse es jedes Mal.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt;
&lt;div id=&#34;toctitle&#34; class=&#34;title&#34;&gt;&lt;/div&gt;
&lt;ul class=&#34;sectlevel1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;#_ruby_installieren&#34;&gt;Ruby installieren&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_asciidoctor_installieren&#34;&gt;Asciidoctor installieren&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_asciidoctor_für_pdf_installieren&#34;&gt;Asciidoctor für PDF installieren&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ruby_installieren&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_ruby_installieren&#34;&gt;&lt;/a&gt;Ruby installieren&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../images/asciidoc-asciidoctor-install/rubyinstall1.gif&#34; alt=&#34;rubyinstall1&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Der Installationsroutine folgen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../images/asciidoc-asciidoctor-install/rubyinstall2.gif&#34; alt=&#34;rubyinstall2&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_asciidoctor_installieren&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_asciidoctor_installieren&#34;&gt;&lt;/a&gt;Asciidoctor installieren&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Öffnen Sie eine Eingabeauforderung und geben Sie folgenden Befehl ein und drücken Sie [Enter].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;$ gem install --http-proxy http://@proxy.&amp;lt;Proxyservername&amp;gt;.&amp;lt;Port&amp;gt; asciidoctor&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../images/asciidoc-asciidoctor-install/asciidoctor-install.gif&#34; alt=&#34;asciidoctor install&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Arbeiten Sie ohne Proxyserver, genügt ein &lt;code&gt;gem install asciidoctor&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_asciidoctor_für_pdf_installieren&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_asciidoctor_für_pdf_installieren&#34;&gt;&lt;/a&gt;Asciidoctor für PDF installieren&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;$ gem install --http-proxy http://@proxy.&amp;lt;Proxyservername&amp;gt;.&amp;lt;Port&amp;gt; asciidoctor-pdf --pre&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;../images/asciidoc-asciidoctor-install/asciidoctor-pdf.gif&#34; alt=&#34;asciidoctor pdf&#34;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Das war´s. Sie können nun mit Hilfe von adoc-Dateien  &lt;a href=&#34;https://asciidoctor.org/docs/user-manual/#html&#34;&gt;Output erzeugen&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;$ asciidoctor mysample.adoc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Eine Homepage mit Asciidoctor erstellen</title>
      <link>https://www.petersell.com/blog/asciidoc-homepage-mit-asciidoctor/</link>
      <category>asciidoc</category>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.petersell.com/blog/asciidoc-homepage-mit-asciidoctor/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Für längere Texte und Anleitungen hatte ich bisher viele CMS genutzt: Wordpress, Kirby, Hugo und Known. Doch keines der CMS kannte ein Austauschformat. Jeder Text wurde in die jeweilige Datenbank abgelegt. Mit jedem Umzug gingen Texte verloren. Nun brachte &lt;a href=&#34;https://www.tomswan.com/&#34;&gt;Tom Swan&lt;/a&gt; mich auf die Idee, es mit Asciidoc zu versuchen. Hier die wichtigsten Schritte.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Update&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Inzwischen nutze ich das CMS Hugo. Nur mit Hilfe des Asciidoctors HTML-Dateien zu erstellen, war doch sehr anstrengend.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt;
&lt;div id=&#34;toctitle&#34; class=&#34;title&#34;&gt;&lt;/div&gt;
&lt;ul class=&#34;sectlevel1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;#_metadaten_für_html_dateien_einrichten&#34;&gt;Metadaten für HTML-Dateien einrichten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_asciidoc_css_anpassen&#34;&gt;asciidoc.css anpassen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_menüleiste_erstellen&#34;&gt;Menüleiste erstellen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_inhaltsverzeichnis_einfügen&#34;&gt;Inhaltsverzeichnis einfügen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#_quelldateien_im_unterordner&#34;&gt;Quelldateien im Unterordner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_metadaten_für_html_dateien_einrichten&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_metadaten_für_html_dateien_einrichten&#34;&gt;&lt;/a&gt;Metadaten für HTML-Dateien einrichten&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sie können mit einer HTML-Datei &lt;a href=&#34;https://asciidoctor.org/docs/user-manual/#docinfo-file&#34;&gt;docinfo.html&lt;/a&gt; und dem &lt;a href=&#34;https://asciidoctor.org/docs/user-manual/#attributes&#34;&gt;Attribut&lt;/a&gt; &lt;code&gt;:docinfo:&lt;/code&gt; die Metadaten innerhalb des HTML-Headers erzeugen und im HTML-Output in jeder Datei einfügen. Erstellen Sie eine HTML-Datei und fügen Sie Ihre Metadaten ein. Z.B.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;!-- docinfo.html --&amp;gt;
&amp;lt;link rel=&#34;shortcut icon&#34; type=&#34;image/png&#34; href=&#34;images/petersell.ico&#34;&amp;gt;
&amp;lt;meta property=&#34;og:title&#34; content=&#34;Andreas Petersell&#34; /&amp;gt;
&amp;lt;meta property=&#34;og:site_name&#34; content=&#34;Andreas Petersell&#34; /&amp;gt;
&amp;lt;meta property=&#34;og:description&#34; content=&#34;Technical Writer (DITA XML) and Author&#34; /&amp;gt;
&amp;lt;link href=&#34;https://twitter.com/petersell&#34; rel=&#34;me&#34; class=&#34;u-url&#34;/&amp;gt;
&amp;lt;link href=&#34;https://www.petersell.com&#34; rel=&#34;me&#34; class=&#34;u-url&#34;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Kopieren Sie die &lt;code&gt;docinfo.html&lt;/code&gt;  in das Quellhauptverzeichnis. Fügen Sie anschließend jeder Ihrer adoc-Dateien folgendes Attribut hinzu:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;:docinfo: shared&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Kopieren Sie abschließend ein Favicon-Datei in das Verzeichnis &lt;code&gt;/images&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_asciidoc_css_anpassen&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_asciidoc_css_anpassen&#34;&gt;&lt;/a&gt;asciidoc.css anpassen&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Nach dem Build wird die Standard-CSS im Ausgabeordner abgelegt. Diese &lt;code&gt;asciidoctor.css&lt;/code&gt;  gilt es umzubennen und im Hauptverzeichnis der Quelldateien abzulegen. Nehmen Sie darin die gewünschten Änderungen vor. Meine Änderungswünsche waren z.B die Farbe grün für die Überschriften und Links. Auch gefiel mir die links ausgerichtete schwarze Fußleiste nicht.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Farbe der Links&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;a{color:#44aa00;text-decoration:underline;line-height:inherit}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Farbe der Fußleiste&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;#footer{max-width:1000px;background-color:rgba(255,255,255,.8);padding:1.25em}
#footer-text{color:rgba(0,0,0,.8);line-height:1.44}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Fügen Sie das Stylesheet Ihrem Buildbefehl hinzu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;asciidoctor -a linkcss -a stylesheet=petersell.css -D C:\asciidoc\out\html &#39;C:\asciidoc\src\**\*.adoc&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_menüleiste_erstellen&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_menüleiste_erstellen&#34;&gt;&lt;/a&gt;Menüleiste erstellen&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Die Möglichkeit, ein kleines Menü mit Asciidoc zusammenstellen zu können, überzeugte mich letztendlich, via Asciidoc zu bloggen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Meine include-Datei, die das Menü mit zwei externen Weblinks enthält, siehe folgendermaßen aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;:home: index.html[Home]
:doku: doku.html[Softwaredokumentation]

link:{home} | link:{doku} | https://www.petersell.com[Stream] | https://www.petersell.com/pages/impressum[Impressum]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Diese include-Datei &lt;code&gt;include-menu.adoc&lt;/code&gt; habe ich in jeder Asciidoc-Datei unterhalb der Attribute eingebunden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;include::include-menu.adoc[]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Diese hier aufgerufene HTML-Seite sieht als &lt;code&gt;doku-asciidoc.adoc&lt;/code&gt; im Header folgendermaßen aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;:title: Asciidoc
:sourcedir: ../
:docinfo: shared
:icons: font
:sectanchors:
:imagesdir: images
:doctype: article
:filename: doku-asciidoc
:date: 22.01.2019

   include::include-menu.adoc[]

- - -

== {title}

- - -

=== Eine Homepage mit Asciidoc erstellen

[abstract]
Für längere Texte und Anleitungen hatte ich bisher viele CMS genutzt: Wordpress, Kirby, Hugo und Known. Doch keines der CMS kannte ein Austauschformat. Jeder Text wurde in die jeweilige Datenbank abgelegt. Mit jedem Umzug gingen Texte verloren. Nun brachte {web-tomswan} mich auf die Idee, es mit Asciidoc zu versuchen. Hier die wichtigsten Schritte.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_inhaltsverzeichnis_einfügen&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_inhaltsverzeichnis_einfügen&#34;&gt;&lt;/a&gt;Inhaltsverzeichnis einfügen&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Wenn Sie auf bestimmten Seiten ein Inhaltsverzeichnis erstellen möchten, fügen Sie diese beiden Attribute ein:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;:toc-title: Inhalt
:toc: macro&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;An die Stelle in der adoc-Datei, wo das Inhaltsverzeichnis erscheinen soll, fügen Sie &lt;code&gt;toc::[]&lt;/code&gt; ein.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_quelldateien_im_unterordner&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_quelldateien_im_unterordner&#34;&gt;&lt;/a&gt;Quelldateien im Unterordner&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Liegen manche Quelldateien in einem Unterordner, könnten folgnde Attribute hilfereich sein:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-asciidoc&#34; data-lang=&#34;asciidoc&#34;&gt;:sourcedir: ../
:docinfodir: ../&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>